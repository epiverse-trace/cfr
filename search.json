[{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_ascertainment.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Estimating the proportion of cases that are reported during an outbreak","text":"vignette outlines function within datadelay used estimate proportion cases, infections hospitalisations ascertained. First, load key packages required vignette: four optional packages, run multiple examples last section vignette:","code":"library(datadelay) library(epiparameter) library(covidregionaldata) library(knitr) library(kableExtra) library(dplyr) library(ggplot2) library(forcats) library(scales)"},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_ascertainment.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Estimating the proportion of cases that are reported during an outbreak","text":"several reasons cases, infections hospitalisations deaths might -ascertained outbreak infectious disease. examples include: Testing capacity criteria sufficient identify infections. Symptom-based testing rather sampling random population. can lead biases due infections either asymptomatic pre-symptomatic phase. Changes case definition time. example, recent COVID-19 pandemic, U.K. roll widespread testing around May 2020. means March April, infections heavily -ascertained. focus period within vignette, illustrates use analysis pipeline well.","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_ascertainment.html","id":"data-required","dir":"Articles","previous_headings":"Methods","what":"Data required","title":"Estimating the proportion of cases that are reported during an outbreak","text":"data required estimate severity disease changes time using datadelay package includes: time-series cases, hospitalisations proxy infections time; time-series deaths; delay distribution, describing probability individual die \\(t\\) days initially exposed. distributions come literature, studies typically fit distributions data describing process. practice, time-series cases deaths already together, given usually originate sources typically collated single data file. package requires data.frame input data — typically case death time series data — delay distribution. delay distribution use comes epiparameter package.","code":""},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_ascertainment.html","id":"estimating-the-proportion-of-cases-or-infections-that-have-been-ascertained","dir":"Articles","previous_headings":"Methods","what":"Estimating the proportion of cases or infections that have been ascertained","title":"Estimating the proportion of cases that are reported during an outbreak","text":"function estimate_reporting() datadelay package estimates proportion cases, infections, hospitalisations — whichever proxy infections provide — ascertained. method used within function extends methods outlined previous vignettes estimating severity ongoing outbreak measuring severity changes time. methods based Nishiura et al.[1] methods estimate severity. extend combining resulting severity estimates assumed baseline severity estimate. proportion cases, infections quantity provided ascertained given ratio assumed true baseline severity estimate delay-adjusted severity estimate. delay-adjusted severity estimates can calculated using either estimate_static() estimate_time_varying() functions.","code":""},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_ascertainment.html","id":"example-with-data-from-the-ongoing-covid-19-pandemic-in-the-u-k-","dir":"Articles","previous_headings":"","what":"Example with data from the ongoing COVID-19 pandemic in the U.K.","title":"Estimating the proportion of cases that are reported during an outbreak","text":"outline time-varying severity estimation works datadelay using number examples. data examples ongoing COVID-19 epidemic. Firstly, analyse U.K. data, pick three countries large outbreaks analyse.","code":""},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_ascertainment.html","id":"downloading-the-raw-data","dir":"Articles","previous_headings":"Example with data from the ongoing COVID-19 pandemic in the U.K.","what":"Downloading the raw data","title":"Estimating the proportion of cases that are reported during an outbreak","text":"First , subset data focus just first months COVID-19 outbreak U.K. , test availability changed dramatically result vaccine campaign. download data — using covidregionaldata package — following command: subset data focus just first months outbreak following command:","code":"df_covid_uk <- get_national_data(   countries = \"united kingdom\", source = \"who\", verbose = FALSE ) |>   dplyr::rename(cases = cases_new, deaths = deaths_new) df_covid_uk_subset <- subset(df_covid_uk, date <= \"2020-05-31\")"},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_ascertainment.html","id":"plotting-the-raw-data","dir":"Articles","previous_headings":"Example with data from the ongoing COVID-19 pandemic in the U.K.","what":"Plotting the raw data","title":"Estimating the proportion of cases that are reported during an outbreak","text":"First, plot case incidence data following command: Figure 1: Incidence cases time ongoing COVID-19 outbreak U.K. , plot death incidence data following command: Figure 2: Incidence deaths time ongoing COVID-19 outbreak U.K.","code":"plot_case_data(df_covid_uk_subset) plot_death_data(df_covid_uk_subset)"},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_ascertainment.html","id":"the-delay-distribution","dir":"Articles","previous_headings":"Example with data from the ongoing COVID-19 pandemic in the U.K.","what":"The delay distribution","title":"Estimating the proportion of cases that are reported during an outbreak","text":"retrieve appropriate distribution — reported [2] — using epidist_db() function epiparameter package, using following command: visualise distribution, evaluate 0 30 days, plot results time. using following command: Figure 3: Example plot appropriate delay distribution COVID-19 epidemic U.K. plot onset--death distribution use throughout example COVID-19, reported https://doi.org/10.3390/jcm9020538.","code":"onset_to_death_covid <- epidist_db(   disease = \"COVID-19\",   epi_dist = \"onset_to_death\",   author = \"Linton_etal\" ) plot_epiparameter_distribution(onset_to_death_covid, by = 0.1)"},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_ascertainment.html","id":"estimating-the-proportion-of-cases-that-have-been-ascertained","dir":"Articles","previous_headings":"Example with data from the ongoing COVID-19 pandemic in the U.K.","what":"Estimating the proportion of cases that have been ascertained","title":"Estimating the proportion of cases that are reported during an outbreak","text":"use estimate_reporting() function within datadelay package calculate time-varying CFR COVID-19 epidemic U.K: function includes type argument, determines whether estimate_static() estimate_time_varying() used estimate delay-adjusted severity disease used numerator -ascertainment calculation. severity_baseline argument estimate_reporting() determines denominator resulting -ascertainment calculation. arguments found estimate_time_varying(). calculated severity quantities time, plot results. First plot naive (uncorrected delays) estiamte:","code":"df_reporting_static <- estimate_reporting(df_covid_uk_subset,   epi_dist = onset_to_death_covid,   type = \"static\",   severity_baseline = 0.014,   correct_for_delays = TRUE ) |>   format_output(estimate_type = \"reporting\", type = \"Under-reporting\") df_reporting_varying <- estimate_reporting(df_covid_uk,   epi_dist = onset_to_death_covid,   type = \"varying\",   severity_baseline = 0.014,   smooth_inputs = TRUE,   burn_in_value = 7,   correct_for_delays = TRUE,   max_date = \"2020-06-30\" ) |>   format_output(estimate_type = \"reporting\", type = \"Under-reporting\") knitr::kable(df_reporting_static,   align = \"c\",   col.names = c(\"Location\", \"Under-reporting estimate\", \"Type\") ) |>   kableExtra::kable_styling(full_width = FALSE) knitr::kable(df_reporting_varying,   align = \"c\",   col.names = c(\"Location\", \"Under-reporting estimate\", \"Type\") ) |>   kableExtra::kable_styling(full_width = FALSE)"},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_ascertainment.html","id":"example-with-all-countries-with-large-early-covid-19-outbreaks","dir":"Articles","previous_headings":"","what":"Example with all countries with large early COVID-19 outbreaks","title":"Estimating the proportion of cases that are reported during an outbreak","text":"Finally, put ascertainment estimates countries large outbreaks single table summarise results single figure. define large outbreak one caused least 100,000 deaths. focus countries resulting table figure become unwieldy made larger. focus period start outbreak 1st June 2020. period -ascertainment cases infections likely highest, tests still developed made widely available many countries. calculate ascertainment estimates countries large COVID-19 outbreaks 1st June 2020, use following command — codeblock depends package dplyr, ease manipulating large data.frames structured group: , plot results single figure, use following command — codeblock depends commonly used package ggplot2, ease plotting large data.frames: Figure 5: Example plot corrected time-varying CFR. calculate time-varying CFR ongoing COVID-19 epidemic United States, corrected delays. Finally, put results large table following command:","code":"df_covid <- get_national_data(   source = \"who\", verbose = FALSE ) |>   rename(cases = cases_new, deaths = deaths_new)  df_covid_subset <- subset(df_covid, date <= \"2020-05-31\") df_reporting <- df_covid |>   group_by(iso_code) |>   mutate(total_deaths = max(deaths_total)) |>   filter(total_deaths > 100000 & !is.na(country)) |>   filter(date < \"2020-06-01\") |>   group_map(~ estimate_reporting(     df_in = .,     epi_dist = onset_to_death_covid,     type = \"varying\",     severity_baseline = 0.014,     burn_in_value = 7,     smooth_inputs = TRUE,     correct_for_delays = TRUE   )) |>   bind_rows()  df_reporting_neat <- format_output(   df_in = df_reporting,   estimate_type = \"reporting\",   type = \"Ascertainment\" ) df_reporting |>   ggplot() +   geom_pointrange(     aes(       x = fct_reorder(location, reporting_me),       y = reporting_me,       ymin = reporting_lo,       ymax = reporting_hi,       colour = location     )   ) +   coord_flip() +   labs(x = NULL, y = \"Ascertainment Rate\") +   theme_minimal() +   theme(legend.position = \"none\") +   scale_y_continuous(labels = percent, limits = c(0, 1)) kable(df_reporting_neat,   align = \"c\",   col.names = c(\"Location\", \"Estimate\", \"Type\") ) |>   kable_styling(full_width = FALSE)"},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_static_severity.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Calculating disease severity by adjusting for delays between onset and outcome during an outbreak","text":"vignette outlines use datadelay calculate disease severity ongoing outbreak. wish estimate one typical severity quantities used epidemiology: case fatality risk (CFR), infection hospitality risk (IFR) hospitalisation fatality risk (HFR). using method uses time series cases, infections hospitalisations (respectively) deaths appropriate delay distribution. methods used originate Nishiura et al. (2009)[1]. vignette demonstrates implement core functions within datadelay. Specifically, cover naive estimates CFR HFR generated ongoing outbreak require adjusting, given sync time series often compared. Arrive estimates time number symptomatic individuals likely known outcome \\(t\\) days symptom onset Define unbiased estimator estimate CFR HFR Nishiura et al (2009)[1] Numerically implement unbiased estimator numerically using maximum likelihood estimation arrive central estimates CFR HFR, along confidence interval. Now load three packages need using following commands:","code":"library(datadelay) library(epiparameter) library(covidregionaldata) library(knitr) library(kableExtra)"},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_static_severity.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Calculating disease severity by adjusting for delays between onset and outcome during an outbreak","text":"Key epidemiological quantities estimated real-time often suffer biases. particular, dividing deaths--date cases--date, infections--date hospitalisations--date leads biased estimates CFR, IFR HFR (respectively). calculation account delays confirmation case, infection hospitalisation--death. perfectly synchronised case death incidence data, basic versions CFR, IFR HFR — defined either ratio total number deaths total number cases, infections hospitalisations — accurate. basic estimates referred naive estimators. However, due delays onset hospitalisation death known diseases, synchronisation never true. example, suppose 10 people start showing symptoms specific disease given day end day remain alive. Suppose next 5 days, numbers new cases continue rise reach 100 new cases day 5. However, suppose day 5, infected individuals remain alive. naive estimate CFR zero calculated end first 5 days zero, zero deaths total. Even deaths begin occur, lag ascertainment case hospitalisation outcome leads consistently biased estimate. Hence, adjusting delays using appropriate delay distribution essential accurate estimates severity.","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_static_severity.html","id":"data-required","dir":"Articles","previous_headings":"Methods","what":"Data required","title":"Calculating disease severity by adjusting for delays between onset and outcome during an outbreak","text":"data required estimate severity disease ongoing outbreak using datadelay package includes: time-series cases, hospitalisations proxy infections time; time-series deaths; delay distribution, describing probability individual die \\(t\\) days initially exposed. distributions come literature, studies typically fit distributions data describing process. practice, time-series cases deaths already together, given usually originate sources typically collated single data file. function within datadelay used estimate severity disease single time-point — estimate_static() — requires data.frame input data — typically case death time series data — delay distribution. delay distribution use comes epiparameter package.","code":""},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_static_severity.html","id":"adjusting-for-delays-between-the-two-time-series","dir":"Articles","previous_headings":"Methods","what":"Adjusting for delays between the two time series","title":"Calculating disease severity by adjusting for delays between onset and outcome during an outbreak","text":"method used function follows Nishiura et al.[1]. function calculates quantity \\(u_t\\) day within input data, represents proportion cases known outcome, day \\(t\\). Following Nishiura et al., \\(u_t\\) calculated following way: \\[\\begin{equation}   u_t = \\frac{\\sum_{= 0}^t         \\sum_{j = 0}^\\infty c_i f_{j - }}{\\sum_{= 0} c_i}, \\end{equation}\\] \\(f_t\\) value probability mass function time \\(t\\) \\(c_t\\), \\(d_t\\) number new cases new deaths time \\(t\\), (respectively). use \\(u_t\\) end outbreak following likelihood function estimate severity disease question. \\[\\begin{equation}   L(\\theta | y) = \\log{\\binom{u_tC}{D}} + D \\log{\\theta} +   (u_tC - D)\\log{(1.0 - \\theta)}, \\end{equation}\\] \\(C\\) \\(D\\) cumulative number cases deaths (respectively) time \\(t\\). Lastly, \\(\\theta\\) parameter wish estimate, severity disease. estimate \\(\\theta\\) using simple maximum-likelihood methods, allowing functions within package quick easy tools use.","code":""},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_static_severity.html","id":"interpreting-the-estimates","dir":"Articles","previous_headings":"Methods","what":"Interpreting the estimates","title":"Calculating disease severity by adjusting for delays between onset and outcome during an outbreak","text":"precise severity measure — CFR, IFR, HFR, etc — represents depends upon input data given user. complete clarity, common time series users might calculate severity resulting severity estimate data: Case death incidence data, case--death delay distribution (close approximation, onset--death) — Case Fatality Risk (CFR). Infection death incidence data, exposure--death delay distribution (close approximation) — Infection Fatality Risk (IFR). Hospitalisation death incidence data, hospitalisation--death delay distribution (close approximation) — Hospitalisation Fatality Risk (HFR).","code":""},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_static_severity.html","id":"example-1976-ebola-outbreak-in-the-democratic-republic-of-the-congo","dir":"Articles","previous_headings":"","what":"Example: 1976 Ebola outbreak in The Democratic Republic of the Congo","title":"Calculating disease severity by adjusting for delays between onset and outcome during an outbreak","text":"use case death incidence data 1976 Ebola outbreak estimate overall severity Ebola. though roughly half way outbreak, emulating methods presented package arguably useful. First , plot data entire outbreak. subset data, keeping first half time series, order emulate attempting calculate severity disease effects long lag-times case detection death serious.","code":""},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_static_severity.html","id":"plotting-the-raw-data","dir":"Articles","previous_headings":"Example: 1976 Ebola outbreak in The Democratic Republic of the Congo","what":"Plotting the raw data","title":"Calculating disease severity by adjusting for delays between onset and outcome during an outbreak","text":"First , load raw data add location following commands: , plot case incidence data following command: Figure 1: Incidence cases time, taken 1976 Ebola outbreak Democratic Republic Congo. Data retrieved within datadelay package Lastly, plot death incidence data following command: Figure 2: Incidence deaths time dataset Figure 1. focus roughly first half dataset. subsetting data include days 30th September 1976, using following command:","code":"data(\"ebola1976\")  # Adding the location to the dataset ebola1976$location <- \"Democractic Republic of the Congo\" plot_case_data(ebola1976) plot_death_data(ebola1976) df_ebola_subset <- subset(ebola1976, date <= \"1976-09-30\")"},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_static_severity.html","id":"the-delay-distribution","dir":"Articles","previous_headings":"Example: 1976 Ebola outbreak in The Democratic Republic of the Congo","what":"The delay distribution","title":"Calculating disease severity by adjusting for delays between onset and outcome during an outbreak","text":"example, given using case data detection case well-approximated symptom onset, use distribution describing delay onset--death. , retrieve distribution literature (reported [2]), using epidist_db() function epiparameter package following command: visualise distribution, evaluate 0 30 days, plot results time: Figure 3: Example plot appropriate delay distribution 1976 Ebola dataset. plot onset--death distribution use throughout example Ebola Virus Disease (EVD), reported .","code":"onset_to_death_ebola <- epidist_db(   disease = \"Ebola Virus Disease\",   epi_dist = \"onset_to_death\",   author = \"Barry_etal\" ) plot_epiparameter_distribution(onset_to_death_ebola, by = 0.1)"},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_static_severity.html","id":"estimating-incidence-of-cases-or-similar-timeseries-with-a-known-outcome","dir":"Articles","previous_headings":"Example: 1976 Ebola outbreak in The Democratic Republic of the Congo","what":"Estimating incidence of cases (or similar timeseries) with a known outcome","title":"Calculating disease severity by adjusting for delays between onset and outcome during an outbreak","text":"function known_outcomes() datadelay package estimates number cases known outcome time. Figure 4: case death time series 1976 Ebola outbreak D.R.C., estimated known outcomes included.","code":"df_known_outcomes_ebola <- known_outcomes(   df_in = df_ebola_subset,   epi_dist = onset_to_death_ebola )  plot_known_outcomes(df_known_outcomes_ebola)"},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_static_severity.html","id":"estimating-the-naive-and-corrected-cfr","dir":"Articles","previous_headings":"Example: 1976 Ebola outbreak in The Democratic Republic of the Congo","what":"Estimating the naive and corrected CFR","title":"Calculating disease severity by adjusting for delays between onset and outcome during an outbreak","text":"calculate proportion cases known outcomes, apply proportion number cases correct delay onset--death. using function estimate_static() datadelay package. function estimates proportion known outcomes time, uses estimate correct naive severity estimate. controlled using correct_for_delays boolean flag argument estimate_static function. Otherwise, calculates naive severity estimate, adjust delays simply total number deaths dataset divided total number cases. run function naive corrected estimates using following two commands (respectively): calculated naive corrected severity estimates, case CFRs, put together make table, using kable() function knitr package, using following command:","code":"# calculating the naive CFR df_ncfr_static_ebola <- estimate_static(   df_ebola_subset,   correct_for_delays = FALSE,   group_by = \"location\" ) |>   format_output(     estimate_type = \"severity\",     type = \"Naive CFR\"   )  # calculating the corrected CFR df_ccfr_static_ebola <- estimate_static(   df_ebola_subset,   correct_for_delays = TRUE,   epi_dist = onset_to_death_ebola,   group_by = \"location\" ) |>   format_output(     estimate_type = \"severity\",     type = \"Corrected CFR\"   )  # putting the two results together df_static_clean_ebola <- rbind(df_ncfr_static_ebola, df_ccfr_static_ebola) kable(df_static_clean_ebola,   align = \"c\",   col.names = c(\"Location\", \"CFR estimate\", \"Type\") ) |>   kable_styling(full_width = FALSE)"},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_static_severity.html","id":"example-with-data-from-the-ongoing-covid-19-pandemic-in-the-u-k-","dir":"Articles","previous_headings":"","what":"Example with data from the ongoing COVID-19 pandemic in the U.K.","title":"Calculating disease severity by adjusting for delays between onset and outcome during an outbreak","text":"now perform similar analysis steps, data taken ongoing COVID-19 epidemic U.K. brevity, describe steps without methodological explanations throughout example.","code":""},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_static_severity.html","id":"plotting-the-raw-data-1","dir":"Articles","previous_headings":"Example with data from the ongoing COVID-19 pandemic in the U.K.","what":"Plotting the raw data","title":"Calculating disease severity by adjusting for delays between onset and outcome during an outbreak","text":"First , subset data focus just first year COVID-19 outbreak U.K. , CFR changed dramatically result vaccine campaign. static severity calculations performing vignette able deal changes severity time. download data — using covidregionaldata package — change default column names match required datadelay subset data.frame focus first year pandemic U.K., following commands: , plot subsetted case data following command: Figure 5: Incidence cases time ongoing COVID-19 outbreak U.K. , plot subsetted death data following command: Figure 6: Incidence deaths time ongoing COVID-19 outbreak U.K.","code":"df_covid_uk <- get_national_data(   countries = \"united kingdom\", source = \"who\", verbose = FALSE )  names(df_covid_uk)[names(df_covid_uk) == \"cases_new\"] <- \"cases\" names(df_covid_uk)[names(df_covid_uk) == \"deaths_new\"] <- \"deaths\"  df_covid_uk_subset <- subset(df_covid_uk, date <= \"2020-12-31\") plot_case_data(df_covid_uk_subset) plot_death_data(df_covid_uk_subset)"},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_static_severity.html","id":"the-delay-distribution-1","dir":"Articles","previous_headings":"Example with data from the ongoing COVID-19 pandemic in the U.K.","what":"The delay distribution","title":"Calculating disease severity by adjusting for delays between onset and outcome during an outbreak","text":"retrieve appropriate distribution (reported [3]), using epidist_db() function epiparameter package, using following command: visualise distribution, evaluate 0 30 days, plot results time. using following command: Figure 7: Example plot appropriate delay distribution COVID-19 epidemic U.K. plot onset--death distribution use throughout example COVID-19, reported .","code":"onset_to_death_covid <- epidist_db(   disease = \"COVID-19\",   epi_dist = \"onset_to_death\",   author = \"Linton_etal\" ) plot_epiparameter_distribution(onset_to_death_covid, by = 0.1)"},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_static_severity.html","id":"estimating-incidence-of-cases-or-similar-timeseries-with-a-known-outcome-1","dir":"Articles","previous_headings":"Example with data from the ongoing COVID-19 pandemic in the U.K.","what":"Estimating incidence of cases (or similar timeseries) with a known outcome","title":"Calculating disease severity by adjusting for delays between onset and outcome during an outbreak","text":"use method implementation Ebola example calculate number known outcomes time, using following command: Figure 8: case time series ongoing COVID-19 epidemic U.K., estimated known outcomes included.","code":"df_known_outcomes_covid <- known_outcomes(   df_in = df_covid_uk_subset,   epi_dist = onset_to_death_covid )  plot_known_outcomes(df_known_outcomes_covid)"},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_static_severity.html","id":"estimating-the-naive-and-corrected-cfr-1","dir":"Articles","previous_headings":"Example with data from the ongoing COVID-19 pandemic in the U.K.","what":"Estimating the naive and corrected CFR","title":"Calculating disease severity by adjusting for delays between onset and outcome during an outbreak","text":"Finally, calculate naive corrected CFRs COVID-19 epidemic U.K: calculated naive corrected CFR values, put together make table, using kable() function knitr package, using following command:","code":"# calculating the naive CFR df_ncfr_static_covid <- estimate_static(   df_covid_uk_subset,   correct_for_delays = FALSE,   group_by = \"country\" ) |>   format_output(     estimate_type = \"severity\", type = \"Naive CFR\"   )  # calculating the corrected CFR df_ccfr_static_covid <- estimate_static(   df_covid_uk_subset,   correct_for_delays = TRUE,   epi_dist = onset_to_death_covid,   group_by = \"country\" ) |>   format_output(estimate_type = \"severity\", type = \"Corrected CFR\")  # putting the two results together df_static_clean_covid <- rbind(df_ncfr_static_covid, df_ccfr_static_covid) kable(df_static_clean_covid,   align = \"c\",   col.names = c(\"Location\", \"CFR estimate\", \"Type\") ) |>   kable_styling(full_width = FALSE)"},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_time_varying_severity.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Estimating how disease severity varies over the course of an outbreak","text":"vignette outlines use datadelay estimate severity disease changes course ongoing outbreak. wish estimate common severity quantities change time: case fatality risk (CFR), infection hospitality risk (IFR) hospitalisation fatality risk (HFR). using method analyses time series cases outcomes appropriate delay distribution. methods used documented Nishiura et al. (2009)[1]. First, load five essential packages needed vignette: four optional packages, run multiple examples last section vignette:","code":"library(datadelay) library(epiparameter) library(covidregionaldata) library(knitr) library(dplyr) library(ggplot2) library(scales)"},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_time_varying_severity.html","id":"motivation","dir":"Articles","previous_headings":"","what":"Motivation","title":"Estimating how disease severity varies over the course of an outbreak","text":"many biological, epidemiological behavioural reasons severity disease might change course outbreak. list common reasons : introduction vaccines therapeutics, reducing relative risk death compared infection. emergence pathogen variants, may alter risk hospitalisation death associated infection. example, suppose new variant currently circulating pathogen emerged. Typically, estimating severity newly emerged variant critical importance surveillance planning purposes. Running estimate_static() function datasets corresponding outbreaks caused two variants lead two static estimates, may may differ. useful, detailed easier interpret approach use function demonstrated vignette: estimate_time_varying().","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_time_varying_severity.html","id":"data-required","dir":"Articles","previous_headings":"Methods","what":"Data required","title":"Estimating how disease severity varies over the course of an outbreak","text":"data required estimate severity disease changes time using datadelay package includes: time-series cases, hospitalisations proxy infections time; time-series deaths; delay distribution, describing probability individual die \\(t\\) days initially exposed. distributions come literature, studies typically fit distributions data describing process. practice, time-series cases deaths already together, given usually originate sources typically collated single data file. package requires data.frame input data — typically case death time series data — delay distribution. delay distribution use comes epiparameter package.","code":""},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_time_varying_severity.html","id":"adjusting-for-delays-between-the-two-time-series","dir":"Articles","previous_headings":"Methods","what":"Adjusting for delays between the two time series","title":"Estimating how disease severity varies over the course of an outbreak","text":"function estimate_time_varying() datadelay package estimates number cases known outcome time. method used within function follows Nishiura et al. (2009)[1]. function calculates quantity \\(k_t\\) day within input data, represents number cases known outcome, day \\(t\\). Following Nishiura et al., \\(k_t\\) calculated following way: \\[\\begin{equation}   k_t = \\sum_{j = 0}^t c_t f_{j - t}. \\end{equation}\\] assume severity measure, example CFR, interest Binomially-distributed, following way \\[\\begin{equation}   d_t \\sim \\text{Binomial}(k_t, \\theta_t). \\end{equation}\\] use maximum-likelihood techniques determine value \\(\\theta_t\\) \\(t\\), whereby \\(\\theta\\) represents severity measure interest.","code":""},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_time_varying_severity.html","id":"interpreting-the-estimates","dir":"Articles","previous_headings":"Methods","what":"Interpreting the estimates","title":"Estimating how disease severity varies over the course of an outbreak","text":"precise severity measure — CFR, IFR, HFR, etc — represents depends upon input data given user. complete clarity, common time series users might calculate severity resulting severity estimate data: Case death incidence data, case--death delay distribution (close approximation, onset--death). result Case Fatality Risk (CFR) estimate. Infection death incidence data, exposure--death delay distribution (close approximation). result Infection Fatality Risk (IFR) estimate. Hospitalisation death incidence data, hospitalisation--death delay distribution (close approximation). result Hospitalisation Fatality Risk (HFR) estimate.","code":""},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_time_varying_severity.html","id":"example-with-data-from-the-ongoing-covid-19-pandemic-in-the-u-k-","dir":"Articles","previous_headings":"","what":"Example with data from the ongoing COVID-19 pandemic in the U.K.","title":"Estimating how disease severity varies over the course of an outbreak","text":"outline time-varying severity estimation works datadelay using number examples. data examples ongoing COVID-19 epidemic. Firstly, analyse U.K. data, pick three countries large outbreaks analyse.","code":""},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_time_varying_severity.html","id":"downloading-the-raw-data","dir":"Articles","previous_headings":"Example with data from the ongoing COVID-19 pandemic in the U.K.","what":"Downloading the raw data","title":"Estimating how disease severity varies over the course of an outbreak","text":"First , subset data focus just first year COVID-19 outbreak U.K. , CFR changed dramatically result number factors: changes policy, implementation relaxation lockdown; rollout vaccine; new variants emerging, etc. download data — using covidregionaldata package — following command: subset data focus just first months outbreak following command:","code":"df_covid_uk <- get_national_data(   countries = \"united kingdom\", source = \"who\", verbose = FALSE ) |>   rename(cases = cases_new, deaths = deaths_new) df_covid_uk_subset <- subset(df_covid_uk, date <= \"2020-12-31\")"},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_time_varying_severity.html","id":"plotting-the-raw-data","dir":"Articles","previous_headings":"Example with data from the ongoing COVID-19 pandemic in the U.K.","what":"Plotting the raw data","title":"Estimating how disease severity varies over the course of an outbreak","text":"First, plot case incidence data following command: Figure 1: Incidence cases time ongoing COVID-19 outbreak U.K. , plot death incidence data following command: Figure 2: Incidence deaths time ongoing COVID-19 outbreak U.K.","code":"plot_case_data(df_covid_uk_subset) plot_death_data(df_covid_uk_subset)"},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_time_varying_severity.html","id":"the-delay-distribution","dir":"Articles","previous_headings":"Example with data from the ongoing COVID-19 pandemic in the U.K.","what":"The delay distribution","title":"Estimating how disease severity varies over the course of an outbreak","text":"retrieve appropriate distribution (reported [2]), using epidist_db() function epiparameter package, using following command: visualise distribution, evaluate 0 30 days, plot results time. using following command: Figure 3: Example plot appropriate delay distribution COVID-19 epidemic U.K. plot onset--death distribution use throughout example COVID-19, reported https://doi.org/10.3390/jcm9020538.","code":"onset_to_death_covid <- epidist_db(   disease = \"COVID-19\",   epi_dist = \"onset_to_death\",   author = \"Linton_etal\" ) plot_epiparameter_distribution(onset_to_death_covid, by = 0.1)"},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_time_varying_severity.html","id":"estimating-the-naive-and-corrected-cfr","dir":"Articles","previous_headings":"Example with data from the ongoing COVID-19 pandemic in the U.K.","what":"Estimating the naive and corrected CFR","title":"Estimating how disease severity varies over the course of an outbreak","text":"use estimate_time_varying() function within datadelay package calculate time-varying CFR COVID-19 epidemic U.K: calculated severity quantities time, plot results. First plot naive estimate, uncorrected delays: Figure 3: Example plot naive time-varying CFR. calculate time-varying CFR ongoing COVID-19 epidemic U.K., uncorrected delays. Lastly, plot corrected — delays — estimate: Figure 4: Example plot corrected time-varying CFR. calculate time-varying CFR ongoing COVID-19 epidemic U.K., corrected delays.","code":"# calculating the naive time-varying CFR df_covid_cfr_uk_naive <- estimate_time_varying(   df_covid_uk_subset,   epi_dist = onset_to_death_covid,   smooth_inputs = TRUE,   burn_in = 7,   correct_for_delays = FALSE )  df_covid_cfr_uk_corrected <- estimate_time_varying(   df_covid_uk_subset,   epi_dist = onset_to_death_covid,   smooth_inputs = TRUE,   burn_in = 7,   correct_for_delays = TRUE ) plot_time_varying(df_covid_cfr_uk_naive, lower = 0, upper = 30) plot_time_varying(df_covid_cfr_uk_corrected, lower = 0, upper = 5)"},{"path":"https://epiverse-trace.github.io/datadelay/articles/estimate_time_varying_severity.html","id":"example-using-covid-19-data-from-multiple-countries","dir":"Articles","previous_headings":"","what":"Example using COVID-19 data from multiple countries","title":"Estimating how disease severity varies over the course of an outbreak","text":"section uses functions dplyr package. two reasons: covidregionaldata, package use download raw data, downloads tibble, -built data.frame class dplyr package package includes functions allow user easily map function across one tibble, separated groups. case, wish run estimate_time_varying() function across countries. tibble contains data countries. make separate tibble country wish run. However, package dplyr already contains functionality run function across large tibble, separated group, use . Furthermore, dplyr, part tidyverse common package, many users already installed. First , retrieve daily case death data COVID-19 countries, using covidregionaldata package: Next, run dplyr commands group data map estimate_time_varying() function across group within tibble. focus dplyr commands vignette. Instead, refer user dplyr documentation. Note code takes moments run. Note, simplicity, use delay distribution onset death locations. plot time-varying CFR selection three countries large outbreaks COVID-19. First , plot time-varying CFR estimate COVID-19 outbreak Brazil: Figure 5: Example plot corrected time-varying CFR. calculate time-varying CFR ongoing COVID-19 epidemic Brazil, corrected delays. Next, plot time-varying CFR estimate COVID-19 outbreak India: Figure 6: Example plot corrected time-varying CFR. calculate time-varying CFR ongoing COVID-19 epidemic Germany deaths total, corrected delays. Next, plot time-varying CFR estimate COVID-19 outbreak United States: Figure 7: Example plot corrected time-varying CFR. calculate time-varying CFR ongoing COVID-19 epidemic United States, corrected delays. Finally, plot countries calculated time-varying CFR , using package ggplot2, contains facet_wrap() function. allows us loop different countries ease. following commands: Figure 8: corrected time-varying CFR country large outbreak. calculate time-varying CFR ongoing COVID-19 epidemic country large outbreak — defined country 100,000 deaths total — corrected delays. focus ggplot2 commands vignette. Instead, refer user ggplot2 documentation .","code":"df_covid <- get_national_data(   source = \"who\", verbose = FALSE ) |>   rename(cases = cases_new, deaths = deaths_new) df_covid_cfr <- df_covid |>   group_by(iso_code) |>   mutate(total_deaths = max(deaths_total)) |>   filter(total_deaths > 100000 & !is.na(country)) |>   group_map(~ estimate_time_varying(     df_in = .,     epi_dist = onset_to_death_covid,     smooth_inputs = TRUE,     smoothing_window = 7,     burn_in = 7   )) |>   bind_rows() subset(df_covid_cfr, country == \"Brazil\") |>   plot_time_varying(lower = 0, upper = 5) subset(df_covid_cfr, country == \"Germany\") |>   plot_time_varying(lower = 0, upper = 5) subset(df_covid_cfr, country == \"United States\") |>   plot_time_varying(lower = 0, upper = 5) df_covid_cfr |>   ggplot(aes(x = date)) +   geom_line(aes(y = severity_me), linetype = \"dashed\", alpha = 0.25) +   geom_ribbon(aes(     ymin = severity_lo,     ymax = severity_hi   ),   fill = \"dodgerblue\", alpha = 0.5   ) +   coord_cartesian(clip = \"off\") +   facet_wrap(~country, ncol = 2) +   theme_minimal() +   labs(x = \"Date\", y = \"CFR (%)\") +   scale_y_continuous(labels = percent, limits = c(0, 0.1))"},{"path":[]},{"path":"https://epiverse-trace.github.io/datadelay/articles/setup_and_installation.html","id":"installing-devtools","dir":"Articles","previous_headings":"Essential packages","what":"Installing devtools","title":"Setup and Installation","text":"use devtools package install required packages: datadelay, epiparameter (optionally) covidregionaldata. install load devtools package, use following commands:","code":"library(pak)"},{"path":"https://epiverse-trace.github.io/datadelay/articles/setup_and_installation.html","id":"installing-datadelay","dir":"Articles","previous_headings":"Essential packages","what":"Installing datadelay","title":"Setup and Installation","text":"datadelay can installed Github, using devtools package, following command:","code":"pak(file.path(\"epiverse-trace\", \"datadelay\"))"},{"path":"https://epiverse-trace.github.io/datadelay/articles/setup_and_installation.html","id":"installing-epiparameter","dir":"Articles","previous_headings":"Essential packages","what":"Installing epiparameter","title":"Setup and Installation","text":"epiparameter package also Epiverse developed work seemlessly datadelay Epiverse packages. therefore describe essential datadelay. However, case whereby user supplies delay distribution, epiparameter package needed. install epiparameter using following command:","code":"pak(file.path(\"epiverse-trace\", \"epiparameter\"))"},{"path":[]},{"path":"https://epiverse-trace.github.io/datadelay/articles/setup_and_installation.html","id":"installing-covidregionaldata","dir":"Articles","previous_headings":"Optional packages — required to run the code in the vignettes","what":"Installing covidregionaldata","title":"Setup and Installation","text":"covidregionaldata package source case death time-series used case studies vignettes datadelay package. Therefore, ensure examples vignettes run, install covidregionaldata using following command:","code":"install.packages(\"covidregionaldata\",   repos = \"https://epiforecasts.r-universe.dev\" )"},{"path":"https://epiverse-trace.github.io/datadelay/articles/setup_and_installation.html","id":"installing-knitr-and-kableextra","dir":"Articles","previous_headings":"Optional packages — required to run the code in the vignettes","what":"Installing knitr and kableExtra","title":"Setup and Installation","text":"knitr package builds tables — called kables, using kable() function — html PDF form automatically data.frames. use vignettes build tables. install , run following command:","code":"install.packages(\"covidregionaldata\",   repos = \"https://epiforecasts.r-universe.dev\" )"},{"path":"https://epiverse-trace.github.io/datadelay/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Adam Kucharski. Author, maintainer. Tim Russell. Author. Pratik Gupte. Author.","code":""},{"path":"https://epiverse-trace.github.io/datadelay/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kucharski , Russell T, Gupte P (2023). datadelay: Delay Functions Epidemic Data. https://github.com/epiverse-trace/datadelay, https://epiverse-trace.github.io/datadelay/.","code":"@Manual{,   title = {datadelay: Delay Functions for Epidemic Data},   author = {Adam Kucharski and Tim Russell and Pratik Gupte},   year = {2023},   note = {https://github.com/epiverse-trace/datadelay, https://epiverse-trace.github.io/datadelay/}, }"},{"path":"https://epiverse-trace.github.io/datadelay/index.html","id":"datadelay-estimating-disease-severity-and-under-reporting","dir":"","previous_headings":"","what":"Delay Functions for Epidemic Data","title":"Delay Functions for Epidemic Data","text":"goal datadelay provide simple, fast methods estimation disease severity -reporting real-time, accounting delays epidemic timeseries.","code":""},{"path":"https://epiverse-trace.github.io/datadelay/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Delay Functions for Epidemic Data","text":"can install development version datadelay GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"epiverse-trace/datadelay\")  # Also install epiparameter for epidemiological parameter values devtools::install_github(\"epiverse-trace/epiparameter\")"},{"path":[]},{"path":"https://epiverse-trace.github.io/datadelay/index.html","id":"ebola-1976","dir":"","previous_headings":"Quick start","what":"Ebola 1976","title":"Delay Functions for Epidemic Data","text":"example basic usage shows use datadelay estimate case fatality ratios 1976 Ebola outbreak. Calculate plot real-time CFR estimates given point time  package currently concept, defined RECON software lifecycle. means essential features mechanisms still developed, package ready use outside development team.","code":"# Load package library(datadelay)  # Load the Ebola 1976 data provided with the package data(\"ebola1976\")  # read epidist for EVD onset to death from {epiparameter} # accesses parameters reported in https://doi.org/10.1016/S0140-6736(18)31387-4 onset_to_death_ebola <- epiparameter::epidist_db(   disease = \"Ebola Virus Disease\",   epi_dist = \"onset_to_death\",   author = \"Barry_etal\" )  # Calculate the static naive and corrected CFRs ncfr <- static_cfr(ebola1976, correct_for_delays = FALSE) ccfr <- static_cfr(ebola1976, correct_for_delays = TRUE, onset_to_death_ebola)  # Print nicely formatted case fatality rate estimates format_cfr_neatly(ncfr) #> [1] \"CFR: 0.96% (95% CI: 0.92% - 0.98%)\" format_cfr_neatly(ccfr) #> [1] \"CFR: 0.96% (95% CI: 0.84% - 1.00%)\" # Calculate naive and corrected static CFRs up to a given point in time df_ncfr <- rolling_cfr(ebola1976, correct_for_delays = FALSE) df_ccfr <- rolling_cfr(   ebola1976,   correct_for_delays = TRUE,   onset_to_death_ebola )  # Plotting case and death data along with CFRs plot_data_and_cfr(df_ncfr, df_ccfr) #> Warning: Removed 1 row containing missing values (`geom_line()`)."},{"path":"https://epiverse-trace.github.io/datadelay/reference/datadelay-package.html","id":null,"dir":"Reference","previous_headings":"","what":"datadelay: Delay Functions for Epidemic Data — datadelay-package","title":"datadelay: Delay Functions for Epidemic Data — datadelay-package","text":"Delay functions routine surveillance data.","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/datadelay/reference/datadelay-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"datadelay: Delay Functions for Epidemic Data — datadelay-package","text":"Maintainer: Adam Kucharski adam.kucharski@lshtm.ac.uk (ORCID) Authors: Tim Russell timothy.russell@lshtm.ac.uk (ORCID) Pratik Gupte pratik.gupte@lshtm.ac.uk (ORCID)","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/ebola1976.html","id":null,"dir":"Reference","previous_headings":"","what":"Ebola 1976 outbreak case data — ebola1976","title":"Ebola 1976 outbreak case data — ebola1976","text":"example epidemic outbreak dataset use datadelay package. dataset comes first Ebola outbreak Zaire 1976.","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/ebola1976.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ebola 1976 outbreak case data — ebola1976","text":"","code":"ebola1976"},{"path":[]},{"path":"https://epiverse-trace.github.io/datadelay/reference/ebola1976.html","id":"ebola-","dir":"Reference","previous_headings":"","what":"ebola1976","title":"Ebola 1976 outbreak case data — ebola1976","text":"data frame 73 rows 60 columns: date Calendar date cases Number cases reported deaths Number deaths reported","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/ebola1976.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Ebola 1976 outbreak case data — ebola1976","text":"doi:10.1016/j.epidem.2014.09.003","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/estimate_reporting.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the ascertainment rate of a disease given a baseline (assumed to be\ntrue) severity estimate — estimate_reporting","title":"Estimate the ascertainment rate of a disease given a baseline (assumed to be\ntrue) severity estimate — estimate_reporting","text":"Estimates proportion cases infections ascertained (declared official cases), given time-series cases deaths, delay distribution baseline severity estimate. resulting ascertainment estimate calculated ratio baseline severity estimate delay-adjusted severity estimate","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/estimate_reporting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the ascertainment rate of a disease given a baseline (assumed to be\ntrue) severity estimate — estimate_reporting","text":"","code":"estimate_reporting(   df_in,   epi_dist,   type = \"static\",   severity_baseline = 0.014,   burn_in_value = get_default_burn_in(epi_dist),   smooth_inputs = NULL,   correct_for_delays = NULL,   max_date = NULL )"},{"path":"https://epiverse-trace.github.io/datadelay/reference/estimate_reporting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the ascertainment rate of a disease given a baseline (assumed to be\ntrue) severity estimate — estimate_reporting","text":"df_in data.frame containing outbreak data. daily time series dates absolute indicator time (e.g. epiday/epiweek) numbers new cases new deaths time point epi_dist delay distribution used, form epiparameter::epidist() object. used obtain probability mass function parameterised time; .e. \\(f(t)\\) gives probability case known outcomes (.e. death) time \\(t\\), parameterised disease-specific parameters supplied . typical example symptom onset death delay distribution. type boolean flag determines whether estimate_static() estimate_time_varying() used calculate resulting ascertainment rate severity_baseline assumed true baseline severity estimate used final ratio estimate overall ascertainment rate burn_in_value number time-points (typically days) disregard start time-series, burn-period desired. default value set mean central spread epidist object passed function, assuming temporal resolution daily. Alternatively, sensible value might 7, disregard first week cases deaths. consider case data including start time-series, set argument 0. smooth_inputs boolean flag determining whether user wishes smooth case death time-series, using moving average procedure calculating time-varying severity. Useful noisey time-series time-series strong reporting (e.g., weekend) effects correct_for_delays boolean flag indicating whether user wishes correct delay case detection death. FALSE corresponds naive severity calculated, TRUE corresponds user calculating corrected severity max_date string representing user supplied maximum date, time-varying severity estimate calculated. Useful case long time-series, user wishes focus specific time-period","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/estimate_reporting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the ascertainment rate of a disease given a baseline (assumed to be\ntrue) severity estimate — estimate_reporting","text":"data.frame containing MLE estimate 95% confidence interval corrected severity","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/estimate_reporting.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the ascertainment rate of a disease given a baseline (assumed to be\ntrue) severity estimate — estimate_reporting","text":"","code":"library(datadelay) library(epiparameter) library(covidregionaldata)  df_covid_uk <- get_national_data(   countries = \"united kingdom\", source = \"who\", verbose = FALSE ) # rename columns colnames(df_covid_uk)[colnames(df_covid_uk) == \"cases_new\"] <- \"cases\" colnames(df_covid_uk)[colnames(df_covid_uk) == \"deaths_new\"] <- \"deaths\"  df_covid_uk_subset <- subset(df_covid_uk, date <= \"2020-05-31\")  onset_to_death_covid <- epidist_db(   disease = \"COVID-19\",   epi_dist = \"onset_to_death\",   author = \"Linton_etal\" ) #> Warning: More than one study found. Selecting first one. Please report an issue with duplicated studies. #> Using Linton et al. (2020) <10.3390/jcm9020538> PMID: 32079150.  #> To retrieve the short citation use the 'get_citation' function  df_reporting_varying <- estimate_reporting(df_covid_uk,   epi_dist = onset_to_death_covid,   type = \"varying\",   severity_baseline = 0.014,   smooth_inputs = TRUE,   burn_in_value = 7L,   correct_for_delays = TRUE,   max_date = \"2020-06-30\" )  format_output(   df_reporting_varying,   estimate_type = \"reporting\",   type = \"Under-reporting\" ) #>         Location                         Estimate            Type #> 1 United Kingdom 21.76% (95% CI: 17.52% - 27.43%) Under-reporting"},{"path":"https://epiverse-trace.github.io/datadelay/reference/estimate_severity.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the corrected case fatality rate — estimate_severity","title":"Estimate the corrected case fatality rate — estimate_severity","text":"Estimate maximum likelihood estimate 95% confidence interval corrected severity, using total cases total cases known outcomes, latter replaces total number deaths standard (naive) severity definition. use binomial likelihood, approximated Poisson likelihood large samples","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/estimate_severity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the corrected case fatality rate — estimate_severity","text":"","code":"estimate_severity(df_in, poisson_threshold = 100, group_by = \"country\")"},{"path":"https://epiverse-trace.github.io/datadelay/reference/estimate_severity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the corrected case fatality rate — estimate_severity","text":"total_cases total number cases observed period outbreak interest. total number cases must greater equal total number deaths total_deaths total number deaths observed period outbreak interest. total number deaths must less equal total number cases u_t proportion cases cases known outcomes point outbreak interest. Used correct total number deaths delays case detection outcome. Given proportion, must 0.0 1.0.","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/estimate_severity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the corrected case fatality rate — estimate_severity","text":"named vector MLE 95% confidence interval corrected severity estimates, named \"severity_me\", \"severity_low\", \"severity_high\".","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/estimate_static.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate a static (in time) severity measure — estimate_static","title":"Estimate a static (in time) severity measure — estimate_static","text":"Calculates severity disease, corrected user-specified delay. cases supplied, delay distribution representing delay case detection death, case fatality ratio time estimated","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/estimate_static.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate a static (in time) severity measure — estimate_static","text":"","code":"estimate_static(   df_in,   correct_for_delays = TRUE,   epi_dist,   poisson_threshold = 100,   group_by = NA )"},{"path":"https://epiverse-trace.github.io/datadelay/reference/estimate_static.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate a static (in time) severity measure — estimate_static","text":"df_in data.frame containing outbreak data. daily time series dates absolute indicator time (e.g. epiday/epiweek) numbers new cases new deaths time point correct_for_delays boolean flag indicating whether user wishes correct delay case detection death. FALSE corresponds naive severity calculated, TRUE corresponds user calculating corrected severity epi_dist delay distribution used, form epiparameter::epidist() object. used obtain probability mass function parameterised time; .e. \\(f(t)\\) gives probability case known outcomes (.e. death) time \\(t\\), parameterised disease-specific parameters supplied . typical example symptom onset death delay distribution. poisson_threshold case count use Poisson approximation. Set 200 default. group_by Column name string group data estimates.","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/estimate_static.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate a static (in time) severity measure — estimate_static","text":"named vector MLE 95% confidence interval severity estimates, named \"severity_me\", \"severity_low\", \"severity_high\".","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/estimate_static.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate a static (in time) severity measure — estimate_static","text":"","code":"library(datadelay) library(epiparameter) library(covidregionaldata)  data(\"ebola1976\")  ebola1976$location <- \"Democractic Republic of the Congo\"  df_ebola_subset <- subset(ebola1976, date <= \"1976-09-30\")  onset_to_death_ebola <- epidist_db(   disease = \"Ebola Virus Disease\",   epi_dist = \"onset_to_death\",   author = \"Barry_etal\" ) #> Using Barry et al. (2018) <10.1016/S0140-6736(18)31387-4> PMID: 30047375.  #> To retrieve the short citation use the 'get_citation' function  df_ncfr_static_ebola <- estimate_static(   df_ebola_subset,   correct_for_delays = FALSE,   group_by = \"location\" )  format_output(   df_ncfr_static_ebola,   estimate_type = \"severity\",   type = \"Naive CFR\" ) #>                            Location                         Estimate      Type #> 1 Democractic Republic of the Congo 71.98% (95% CI: 64.86% - 78.37%) Naive CFR  # calculating the corrected CFR df_ccfr_static_ebola <- estimate_static(   df_ebola_subset,   correct_for_delays = TRUE,   epi_dist = onset_to_death_ebola,   group_by = \"location\" )  format_output(   df_ccfr_static_ebola,   estimate_type = \"severity\",   type = \"Corrected CFR\" ) #>                            Location                           Estimate #> 1 Democractic Republic of the Congo 100.00% (95% CI: 87.00% - 100.00%) #>            Type #> 1 Corrected CFR"},{"path":"https://epiverse-trace.github.io/datadelay/reference/estimate_time_varying.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate known outcomes from case and death time-series data — estimate_time_varying","title":"Estimate known outcomes from case and death time-series data — estimate_time_varying","text":"Calculates severity disease changes time, corrected user-specified delay. cases supplied, delay distribution representing delay case detection death, case fatality ratio time estimated","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/estimate_time_varying.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate known outcomes from case and death time-series data — estimate_time_varying","text":"","code":"estimate_time_varying(   df_in,   epi_dist,   burn_in_value = get_default_burn_in(epi_dist),   smooth_inputs = FALSE,   smoothing_window = 7,   correct_for_delays = TRUE )"},{"path":"https://epiverse-trace.github.io/datadelay/reference/estimate_time_varying.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate known outcomes from case and death time-series data — estimate_time_varying","text":"df_in data.frame containing outbreak data. daily time series dates absolute indicator time (e.g. epiday/epiweek) numbers new cases new deaths time point epi_dist delay distribution used, form epiparameter::epidist() object. used obtain probability mass function parameterised time; .e. \\(f(t)\\) gives probability case known outcomes (.e. death) time \\(t\\), parameterised disease-specific parameters supplied . typical example symptom onset death delay distribution. burn_in_value number time-points (typically days) disregard start time-series, burn-period desired. default value set mean central spread epidist object passed function, assuming temporal resolution daily. Alternatively, sensible value might 7, disregard first week cases deaths. consider case data including start time-series, set argument 0. smooth_inputs boolean flag determining whether user wishes smooth case death time-series, using moving average procedure calculating time-varying severity. Useful noisey time-series time-series strong reporting (e.g., weekend) effects smoothing_window number determining smoothing window size use smoothing case death time-series, using moving average procedure calculating time-varying severity. Useful noisy time-series time-series strong reporting (e.g., weekend) effects. default value 1 smoothing. Values > 1 apply smoothing. correct_for_delays boolean flag indicating whether user wishes correct delay case detection death. FALSE corresponds naive severity calculated, TRUE corresponds user calculating corrected severity","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/estimate_time_varying.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate known outcomes from case and death time-series data — estimate_time_varying","text":"data.frame containing MLE estimate 95% confidence interval corrected severity","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/estimate_time_varying.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate known outcomes from case and death time-series data — estimate_time_varying","text":"","code":"library(datadelay) library(epiparameter) library(covidregionaldata) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  df_covid_uk <- get_national_data(   countries = \"united kingdom\", source = \"who\", verbose = FALSE ) df_covid_uk <- dplyr::rename(   df_covid_uk,   cases = cases_new, deaths = deaths_new )  df_covid_uk_subset <- subset(df_covid_uk, date <= \"2020-12-31\")  onset_to_death_covid <- epidist_db(   disease = \"COVID-19\",   epi_dist = \"onset_to_death\",   author = \"Linton_etal\" ) #> Warning: More than one study found. Selecting first one. Please report an issue with duplicated studies. #> Using Linton et al. (2020) <10.3390/jcm9020538> PMID: 32079150.  #> To retrieve the short citation use the 'get_citation' function  df_covid_cfr_uk_naive <- estimate_time_varying(   df_covid_uk_subset,   epi_dist = onset_to_death_covid,   smooth_inputs = TRUE,   burn_in_value = 7L,   correct_for_delays = FALSE )  df_covid_cfr_uk_corrected <- estimate_time_varying(   df_covid_uk_subset,   epi_dist = onset_to_death_covid,   smooth_inputs = TRUE,   burn_in_value = 7L,   correct_for_delays = TRUE )"},{"path":"https://epiverse-trace.github.io/datadelay/reference/format_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Neatly format CFR estimates — format_output","title":"Neatly format CFR estimates — format_output","text":"Format CFR MLE 95% range estimates neatly, giving estimates 3 significant figures presenting MLE 95% interval single line","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/format_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Neatly format CFR estimates — format_output","text":"","code":"format_output(df_in, estimate_type, type = NULL)"},{"path":"https://epiverse-trace.github.io/datadelay/reference/format_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Neatly format CFR estimates — format_output","text":"df_in data.frame format outputted estimate_static() estimate_time_varying(). estimate_type required string describing whether severity reporting estimate formatted. package calculates severity -ascertainment estimates uses formatting function type optional string describing estimate, typically used describe whether estimate corrected delays ","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/format_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Neatly format CFR estimates — format_output","text":"Prints output estimate_static() estimate_time_varying() neatly R terminal.","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/format_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Neatly format CFR estimates — format_output","text":"","code":"# load Ebola 1976 outbreak data data(\"ebola1976\")  # add the location the dataset relates to, for ease of formatting at the end # of this example ebola1976$location <- \"Democratic Republic of the Congo\"  # subset the data so we focus on the earlier half of the outbreak df_ebola_subset <- subset(ebola1976, date <= \"1976-09-30\")  # read epidist for EVD onset to death from {epiparameter} onset_to_death_ebola <- epiparameter::epidist_db(   disease = \"Ebola Virus Disease\",   epi_dist = \"onset_to_death\",   author = \"Barry_etal\" ) #> Using Barry et al. (2018) <10.1016/S0140-6736(18)31387-4> PMID: 30047375.  #> To retrieve the short citation use the 'get_citation' function  # Calculate static naive CFR ncfr <- estimate_static(   df_in = df_ebola_subset,   correct_for_delays = FALSE,   group_by = \"location\" )  # Calculate static corrected CFRs ccfr <- estimate_static(   df_in = ebola1976,   correct_for_delays = TRUE,   epi_dist = onset_to_death_ebola,   group_by = \"location\" )  # Formats the output of the CFR data.frames nicely # and prints to the terminal format_output(ncfr, estimate_type = \"severity\", type = \"Naive\") #>                           Location                         Estimate  Type #> 1 Democratic Republic of the Congo 71.98% (95% CI: 64.86% - 78.37%) Naive format_output(ccfr, estimate_type = \"severity\", type = \"Corrected\") #>                           Location                          Estimate      Type #> 1 Democratic Republic of the Congo 95.90% (95% CI: 84.20% - 100.00%) Corrected"},{"path":"https://epiverse-trace.github.io/datadelay/reference/get_default_burn_in.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a default burn-in value from a delay distribution — get_default_burn_in","title":"Get a default burn-in value from a delay distribution — get_default_burn_in","text":"Get default burn-value delay distribution","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/get_default_burn_in.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a default burn-in value from a delay distribution — get_default_burn_in","text":"","code":"get_default_burn_in(epi_dist)"},{"path":"https://epiverse-trace.github.io/datadelay/reference/get_default_burn_in.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a default burn-in value from a delay distribution — get_default_burn_in","text":"epi_dist delay distribution used, form epiparameter::epidist() object. used obtain probability mass function parameterised time; .e. \\(f(t)\\) gives probability case known outcomes (.e. death) time \\(t\\), parameterised disease-specific parameters supplied . typical example symptom onset death delay distribution.","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/get_default_burn_in.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a default burn-in value from a delay distribution — get_default_burn_in","text":"single integer, burn-value.","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/known_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate known outcomes from case and death time-series data — known_outcomes","title":"Estimate known outcomes from case and death time-series data — known_outcomes","text":"Estimates expected number individuals known outcomes case death time series data outbreak, time point supplied. Calculates daily new number known outcomes. Uses probability mass function representing delay case detection death, typically approximated symptom onset death distribution literature disease question.","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/known_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate known outcomes from case and death time-series data — known_outcomes","text":"","code":"known_outcomes(df_in, epi_dist)"},{"path":"https://epiverse-trace.github.io/datadelay/reference/known_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate known outcomes from case and death time-series data — known_outcomes","text":"df_in data.frame containing outbreak data. daily time series dates absolute indicator time (e.g. epiday/epiweek) numbers new cases new deaths time point epi_dist delay distribution used, form epiparameter::epidist() object. used obtain probability mass function parameterised time; .e. \\(f(t)\\) gives probability case known outcomes (.e. death) time \\(t\\), parameterised disease-specific parameters supplied . typical example symptom onset death delay distribution.","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/known_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate known outcomes from case and death time-series data — known_outcomes","text":"data.frame containing MLE estimate 95% confidence interval corrected CFR","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/known_outcomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate known outcomes from case and death time-series data — known_outcomes","text":"","code":"# Load Ebola 1976 outbreak data data(\"ebola1976\")  # read epidist for EVD onset to death from {epiparameter} onset_to_death_ebola <- epiparameter::epidist_db(   disease = \"Ebola Virus Disease\",   epi_dist = \"onset_to_death\",   author = \"Barry_etal\" ) #> Using Barry et al. (2018) <10.1016/S0140-6736(18)31387-4> PMID: 30047375.  #> To retrieve the short citation use the 'get_citation' function  df_known_outcomes <- known_outcomes(df_in = ebola1976, onset_to_death_ebola)"},{"path":"https://epiverse-trace.github.io/datadelay/reference/plot_case_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the raw case time-series data — plot_case_data","title":"Plot the raw case time-series data — plot_case_data","text":"Produces simple plot, using base R, raw case time-series data","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/plot_case_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the raw case time-series data — plot_case_data","text":"","code":"plot_case_data(df_in)"},{"path":"https://epiverse-trace.github.io/datadelay/reference/plot_case_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the raw case time-series data — plot_case_data","text":"df_in data.frame containing outbreak data. daily time series dates absolute indicator time (e.g. epiday/epiweek) numbers new case time point. input data.frame assumes columns names: date, cases deaths","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/plot_case_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the raw case time-series data — plot_case_data","text":"plot case time-series","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/plot_case_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the raw case time-series data — plot_case_data","text":"","code":"# Load Ebola 1976 outbreak data data(\"ebola1976\")  plot_case_data(ebola1976)"},{"path":"https://epiverse-trace.github.io/datadelay/reference/plot_death_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the raw death time-series data — plot_death_data","title":"Plot the raw death time-series data — plot_death_data","text":"Produces simple plot, using base R, raw death time-series data","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/plot_death_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the raw death time-series data — plot_death_data","text":"","code":"plot_death_data(df_in)"},{"path":"https://epiverse-trace.github.io/datadelay/reference/plot_death_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the raw death time-series data — plot_death_data","text":"df_in data.frame containing outbreak data. daily time series dates absolute indicator time (e.g. epiday/epiweek) numbers new deaths time point. input data.frame assumes columns names: date, cases deaths","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/plot_death_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the raw death time-series data — plot_death_data","text":"plot death time-series","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/plot_death_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the raw death time-series data — plot_death_data","text":"","code":"# Load Ebola 1976 outbreak data data(\"ebola1976\")  plot_death_data(ebola1976)"},{"path":"https://epiverse-trace.github.io/datadelay/reference/plot_epiparameter_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot an epiparameter distribution object — plot_epiparameter_distribution","title":"Plot an epiparameter distribution object — plot_epiparameter_distribution","text":"Produces simple plot, using base R, epiparameter distribution object class epiparameter::epidist().","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/plot_epiparameter_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot an epiparameter distribution object — plot_epiparameter_distribution","text":"","code":"plot_epiparameter_distribution(epidist, from = 0, to = 30, by = 0.1)"},{"path":"https://epiverse-trace.github.io/datadelay/reference/plot_epiparameter_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot an epiparameter distribution object — plot_epiparameter_distribution","text":"epidist epiparameter object retrieved using function epiparameter::epidist_db() otherwise constructed using epiparameter::epidist() day start plotting distribution. Default option day 0. day start plotting distribution. Default option day 30. time resolution plot distribution. Default option 0.1 days.","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/plot_epiparameter_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot an epiparameter distribution object — plot_epiparameter_distribution","text":"plot delay distribution time","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/plot_epiparameter_distribution.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot an epiparameter distribution object — plot_epiparameter_distribution","text":"","code":"# Retrieve the delay distribution between onset and death for Ebola, # using the epiparameter function `epiparameter::epidist_db()`  onset_to_death_ebola <- epiparameter::epidist_db(   disease = \"Ebola Virus Disease\",   epi_dist = \"onset_to_death\",   author = \"Barry_etal\" ) #> Using Barry et al. (2018) <10.1016/S0140-6736(18)31387-4> PMID: 30047375.  #> To retrieve the short citation use the 'get_citation' function  plot_epiparameter_distribution(onset_to_death_ebola, by = 1)"},{"path":"https://epiverse-trace.github.io/datadelay/reference/plot_known_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the estimated known outcomes, as well as the raw data — plot_known_outcomes","title":"Plot the estimated known outcomes, as well as the raw data — plot_known_outcomes","text":"Produces simple plot, using base R, raw case death time-series data, well estimated number known outcomes day.","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/plot_known_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the estimated known outcomes, as well as the raw data — plot_known_outcomes","text":"","code":"plot_known_outcomes(df_in)"},{"path":"https://epiverse-trace.github.io/datadelay/reference/plot_known_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the estimated known outcomes, as well as the raw data — plot_known_outcomes","text":"df_in data.frame format returned known_outcomes().","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/plot_known_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the estimated known outcomes, as well as the raw data — plot_known_outcomes","text":"plot three time-series plot, legend","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/plot_known_outcomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the estimated known outcomes, as well as the raw data — plot_known_outcomes","text":"","code":"# Load Ebola 1976 outbreak data data(\"ebola1976\")  onset_to_death_ebola <- epiparameter::epidist_db(   disease = \"Ebola Virus Disease\",   epi_dist = \"onset_to_death\",   author = \"Barry_etal\" ) #> Using Barry et al. (2018) <10.1016/S0140-6736(18)31387-4> PMID: 30047375.  #> To retrieve the short citation use the 'get_citation' function  df_known_outcomes <- known_outcomes(   df_in = ebola1976,   epi_dist = onset_to_death_ebola )  plot_known_outcomes(df_known_outcomes)"},{"path":"https://epiverse-trace.github.io/datadelay/reference/plot_time_varying.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot time-varying severity estimates — plot_time_varying","title":"Plot time-varying severity estimates — plot_time_varying","text":"Produces plot, using base R, time-varying severity estimate entire period calculated.","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/plot_time_varying.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot time-varying severity estimates — plot_time_varying","text":"","code":"plot_time_varying(df_in, lower = 0, upper = 10)"},{"path":"https://epiverse-trace.github.io/datadelay/reference/plot_time_varying.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot time-varying severity estimates — plot_time_varying","text":"df_in data.frame format returned known_outcomes(). lower numeric value determining lower limit y-axis plot. place easily help user produce readable graph, severity estimates often typical ranges certain diseases. upper numeric value determining upper limit y-axis plot.","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/plot_time_varying.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot time-varying severity estimates — plot_time_varying","text":"plot time-varying severity estimate","code":""},{"path":"https://epiverse-trace.github.io/datadelay/reference/plot_time_varying.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot time-varying severity estimates — plot_time_varying","text":"","code":"library(datadelay) library(epiparameter) library(covidregionaldata)  df_covid_uk <- get_national_data(   countries = \"united kingdom\", source = \"who\", verbose = FALSE ) # rename columns colnames(df_covid_uk)[colnames(df_covid_uk) == \"cases_new\"] <- \"cases\" colnames(df_covid_uk)[colnames(df_covid_uk) == \"deaths_new\"] <- \"deaths\"  df_covid_uk_subset <- subset(df_covid_uk, date <= \"2020-12-31\")  onset_to_death_covid <- epidist_db(   disease = \"COVID-19\",   epi_dist = \"onset_to_death\",   author = \"Linton_etal\" ) #> Warning: More than one study found. Selecting first one. Please report an issue with duplicated studies. #> Using Linton et al. (2020) <10.3390/jcm9020538> PMID: 32079150.  #> To retrieve the short citation use the 'get_citation' function  df_covid_cfr_uk_naive <- estimate_time_varying(   df_covid_uk_subset,   epi_dist = onset_to_death_covid,   smooth_inputs = TRUE,   burn_in_value = 7,   correct_for_delays = FALSE )  df_covid_cfr_uk_corrected <- estimate_time_varying(   df_covid_uk_subset,   epi_dist = onset_to_death_covid,   smooth_inputs = TRUE,   burn_in_value = 7,   correct_for_delays = TRUE )  plot_time_varying(df_covid_cfr_uk_naive, lower = 0, upper = 5)  plot_time_varying(df_covid_cfr_uk_corrected, lower = 0, upper = 5)"}]
