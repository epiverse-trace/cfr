[{"path":"https://epiverse-trace.github.io/cfr/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to cfr","title":"Contributing to cfr","text":"outlines propose change cfr.","code":""},{"path":"https://epiverse-trace.github.io/cfr/CONTRIBUTING.html","id":"making-changes","dir":"","previous_headings":"","what":"Making changes","title":"Contributing to cfr","text":"want make change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See bug report template. feature request see feature request.","code":""},{"path":"https://epiverse-trace.github.io/cfr/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Making changes","what":"Pull request process","title":"Contributing to cfr","text":"See pull request template Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"epiverse-trace/cfr\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://epiverse-trace.github.io/cfr/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Making changes","what":"Code style","title":"Contributing to cfr","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://epiverse-trace.github.io/cfr/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to cfr","text":"Please note cfr project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://epiverse-trace.github.io/cfr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 cfr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://epiverse-trace.github.io/cfr/articles/cfr.html","id":"use-case","dir":"Articles","previous_headings":"","what":"Use case","title":"Estimating disease severity while correcting for reporting delays","text":"disease outbreak underway. want know severe disease , , case fatality ratio, delay cases reported, outcomes cases — whether recovery death — known. reporting delay, can accounted knowing reporting delay past outbreaks.","code":""},{"path":"https://epiverse-trace.github.io/cfr/articles/cfr.html","id":"what-we-have","dir":"Articles","previous_headings":"","what":"What we have","title":"Estimating disease severity while correcting for reporting delays","text":"dataset daily cases deaths reported; Data distribution reporting delays past outbreaks similar diseases.","code":""},{"path":"https://epiverse-trace.github.io/cfr/articles/cfr.html","id":"what-we-assume","dir":"Articles","previous_headings":"","what":"What we assume","title":"Estimating disease severity while correcting for reporting delays","text":"data reporting delays past outbreaks informative reporting delays current outbreak.","code":""},{"path":"https://epiverse-trace.github.io/cfr/articles/cfr.html","id":"case-and-death-data","dir":"Articles","previous_headings":"","what":"Case and death data","title":"Estimating disease severity while correcting for reporting delays","text":"Data cases deaths may obtained number publicly accessible sources, global Covid-19 dataset collected World Data. outbreak response scenario, data may also compiled shared locally. cfr package requires data frame three columns, “date”, “cases”, “deaths”, giving daily number reported cases deaths. Datasets columns contain information different names can handled common data science tools, packages Tidyverse, prepare data cfr. See examples vignette obtaining static severity estimate. , use data first Ebola outbreak, Democratic Republic Congo 1976, included package (Camacho et al. 2014).","code":"data(\"ebola1976\")  # view ebola dataset head(ebola1976) #>         date cases deaths #> 1 1976-08-25     1      0 #> 2 1976-08-26     0      0 #> 3 1976-08-27     0      0 #> 4 1976-08-28     0      0 #> 5 1976-08-29     0      0 #> 6 1976-08-30     0      0"},{"path":"https://epiverse-trace.github.io/cfr/articles/cfr.html","id":"obtaining-data-on-reporting-delays","dir":"Articles","previous_headings":"","what":"Obtaining data on reporting delays","title":"Estimating disease severity while correcting for reporting delays","text":"can access data distribution delays cases reported, deaths recoveries cases known, using convenient epiparameter package. access disease’s ‘onset--death’ distribution recent Ebola outbreak stored package’s parameter library, using function epiparameter::epidist_db() (Barry et al. 2018). <epidist> object can passed functions cfr help correct reporting delays.","code":"library(epiparameter) onset_to_death_ebola <- epidist_db(   disease = \"Ebola Virus Disease\",   epi_dist = \"onset_to_death\",   author = \"Barry_etal\" ) #> Using Barry et al. (2018) <10.1016/S0140-6736(18)31387-4> PMID: 30047375.  #> To retrieve the short citation use the 'get_citation' function  # print the object onset_to_death_ebola #> Disease: Ebola Virus Disease #> Pathogen: Ebola Virus-Zaire Subtype #> Epi Distribution: onset to death #> Study: Barry et al. (2018) <10.1016/S0140-6736(18)31387-4> PMID: 30047375 #> Distribution: gamma #> Parameters: #>   shape: 2.400 #>   scale: 3.333"},{"path":"https://epiverse-trace.github.io/cfr/articles/cfr.html","id":"estimate-disease-severity","dir":"Articles","previous_headings":"","what":"Estimate disease severity","title":"Estimating disease severity while correcting for reporting delays","text":"use function estimate_static() calculate overall disease severity latest date outbreak. output dataframe single row three columns holds estimates severity’s mean well lower upper limits. estimate_static() function well suited small outbreaks. larger outbreaks may useful know severity changed time, function estimate_time_varying() available. function however well suited small outbreaks. can found vignette estimating disease severity varies course outbreak.","code":"estimate_static(   data = ebola1976,   correct_for_delays = TRUE,   epidist = onset_to_death_ebola ) #>   severity_me severity_lo severity_hi #> 1       0.959       0.842           1"},{"path":"https://epiverse-trace.github.io/cfr/articles/cfr.html","id":"estimate-ascertainment-rate","dir":"Articles","previous_headings":"","what":"Estimate ascertainment rate","title":"Estimating disease severity while correcting for reporting delays","text":"important know proportion cases outbreak ascertained muster appropriate response, estimate overall burden outbreak. Note ascertainment rate may affected number factors. main factor low ascertainment lack (access ) testing capacity, refer reporting -reporting. estimate_ascertainment() function can help estimate using daily case death data, known severity disease previous outbreaks, well delay distribution onset--death. , estimate reporting 1976 Ebola outbreak Congo, assuming ebolavirus disease (time) baseline severity 0.7 (70% cases result deaths). analysis suggests 70% 83% cases reported outbreak. details can found vignette estimating proportion cases reported outbreak.","code":"# estimate reporting with a baseline severity of 70% estimate_ascertainment(   data = ebola1976,   epidist = onset_to_death_ebola,   type = \"static\",   severity_baseline = 0.7,   correct_for_delays = TRUE ) #>   ascertainment_me ascertainment_lo ascertainment_hi #> 1         0.729927              0.7        0.8313539"},{"path":[]},{"path":"https://epiverse-trace.github.io/cfr/articles/data_from_incidence2.html","id":"incidence2-objects-from-linelists","dir":"Articles","previous_headings":"","what":"<incidence2> objects from linelists","title":"Handling data from {incidence2}","text":"first load linelist data 2014 Ebola outbreak provided outbreaks package, create incidence2 object view . prepare <incidence2> object using date_of_onset date_of_outcome columns date indices, grouping outcome. steps use combination functions incidence2 well common data science packages dplyr. example, used fill_NA argument set TRUE; replaces missing case death counts data 0s. default value argument FALSE, however, keeping NAs data causes downstream issues functions estimate_static(). recommend users carefully consider whether can safely fill NAs zeros purposes analysis. load delay distribution epiparameter database <epidist> object. Finally, estimate static case fatality rate correcting delays suing estimate_static() function.","code":"# load ebola dataset from outbreak data(\"ebola_sim_clean\") ebola <- ebola_sim_clean$linelist  # view ebola head(ebola) #>   case_id generation date_of_infection date_of_onset date_of_hospitalisation #> 1  d1fafd          0              <NA>    2014-04-07              2014-04-17 #> 2  53371b          1        2014-04-09    2014-04-15              2014-04-20 #> 3  f5c3d8          1        2014-04-18    2014-04-21              2014-04-25 #> 4  6c286a          2              <NA>    2014-04-27              2014-04-27 #> 5  0f58c4          2        2014-04-22    2014-04-26              2014-04-29 #> 6  49731d          0        2014-03-19    2014-04-25              2014-05-02 #>   date_of_outcome outcome gender           hospital       lon      lat #> 1      2014-04-19    <NA>      f  Military Hospital -13.21799 8.473514 #> 2            <NA>    <NA>      m Connaught Hospital -13.21491 8.464927 #> 3      2014-04-30 Recover      f              other -13.22804 8.483356 #> 4      2014-05-07   Death      f               <NA> -13.23112 8.464776 #> 5      2014-05-17 Recover      f              other -13.21016 8.452143 #> 6      2014-05-07    <NA>      f               <NA> -13.23443 8.468572 # create incidence2 object of ebola deaths ebola <- incidence(   x = ebola,   date_index = c(     onset = \"date_of_onset\",     outcome = \"date_of_outcome\"   ),   groups = \"outcome\" )  # filter for outcomes that are deaths using dplyr::filter --- death counts # also filter for all onsets --- these are the case counts ebola <- filter(   ebola,   (outcome == \"Death\" & count_variable == \"outcome\") |     (count_variable == \"onset\") )  # remove groups using incidence2::regroup() ebola <- regroup(ebola)  # prepare data ebola <- prepare_data(   ebola,   cases_variable = \"onset\",   deaths_variable = \"outcome\",   fill_NA = TRUE ) onset_to_death_ebola <- epidist_db(   disease = \"Ebola Virus Disease\",   epi_dist = \"onset_to_death\",   author = \"Barry_etal\" ) #> Using Barry et al. (2018) <10.1016/S0140-6736(18)31387-4> PMID: 30047375.  #> To retrieve the short citation use the 'get_citation' function # estimate static CFR as a sanity check estimate_static(   ebola,   correct_for_delays = TRUE, epidist = onset_to_death_ebola ) #>   severity_me severity_lo severity_hi #> 1       0.369       0.354       0.384"},{"path":"https://epiverse-trace.github.io/cfr/articles/data_from_incidence2.html","id":"incidence2-objects-from-aggregated-case-data","dir":"Articles","previous_headings":"<incidence2> objects from linelists","what":"<incidence2> objects from aggregated case data","title":"Handling data from {incidence2}","text":"Aggregated case data Covid-19 dataset provided incidence2 can used cfr directly. usage shown vignettes vignette estimating time-varying severity. show transform data <incidence2> objects, prepare cfr. columns dataset already format can converted <incidence2> object using incidence2::incidence(), handled prepare_data(). code chunks show done. Note grouping structure dataset given “region” variable present <incidence2> object, overridden provide single dataset cases deaths summed across regions date prepare_data(). functionality currently development might change future.","code":"# get data bundled with the {incidence2} package covid_uk <- covidregionaldataUK  # view the data head(covid_uk) #>         date          region region_code cases_new cases_total deaths_new #> 1 2020-01-30   East Midlands   E12000004        NA          NA         NA #> 2 2020-01-30 East of England   E12000006        NA          NA         NA #> 3 2020-01-30         England   E92000001         2           2         NA #> 4 2020-01-30          London   E12000007        NA          NA         NA #> 5 2020-01-30      North East   E12000001        NA          NA         NA #> 6 2020-01-30      North West   E12000002        NA          NA         NA #>   deaths_total recovered_new recovered_total hosp_new hosp_total tested_new #> 1           NA            NA              NA       NA         NA         NA #> 2           NA            NA              NA       NA         NA         NA #> 3           NA            NA              NA       NA         NA         NA #> 4           NA            NA              NA       NA         NA         NA #> 5           NA            NA              NA       NA         NA         NA #> 6           NA            NA              NA       NA         NA         NA #>   tested_total #> 1           NA #> 2           NA #> 3           NA #> 4           NA #> 5           NA #> 6           NA # convert to incidence2 object covid_uk_incidence <- incidence(   covid_uk,   date_index = \"date\",   counts = c(\"cases_new\", \"deaths_new\"),   count_names_to = \"count_variable\" )  # View head of prepared data head(   prepare_data(     covid_uk_incidence,     cases_variable = \"cases_new\",     deaths_variable = \"deaths_new\",     fill_NA = TRUE   ) ) #>         date cases deaths #> 1 2020-01-30     0      0 #> 2 2020-01-31     0      0 #> 3 2020-02-01     0      0 #> 4 2020-02-02     0      0 #> 5 2020-02-03     0      0 #> 6 2020-02-04     0      0"},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_ascertainment.html","id":"use-case","dir":"Articles","previous_headings":"","what":"Use case","title":"Estimating the proportion of cases that are ascertained during an outbreak","text":"wish estimate one typical severity quantities used epidemiology – case fatality risk (CFR), infection hospitality risk (IFR) hospitalisation fatality risk (HFR) – using method uses time series cases, infections hospitalisations (respectively) deaths, correcting delay reporting outcomes cases.","code":""},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_ascertainment.html","id":"what-we-have","dir":"Articles","previous_headings":"","what":"What we have","title":"Estimating the proportion of cases that are ascertained during an outbreak","text":"time-series cases, hospitalisations proxy infections time; time-series deaths; delay distribution, describing probability individual die \\(t\\) days initially infected. first two elements expected included dataframe columns “dates”, “cases”, “deaths”; see examples. delay distribution expected specified object class <epidist> package epiparameter.","code":""},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_ascertainment.html","id":"ascertainment-for-the-covid-19-pandemic-in-the-u-k-","dir":"Articles","previous_headings":"","what":"Ascertainment for the Covid-19 pandemic in the U.K.","title":"Estimating the proportion of cases that are ascertained during an outbreak","text":"function estimate_ascertainment() cfr package estimates proportion cases, infections, hospitalisations – whichever proxy infections provided – ascertained. methods based Nishiura et al. (2009) estimate severity, extended combining resulting severity estimates assumed baseline severity estimate. proportion cases, infections quantity provided ascertained given ratio (assumed) true baseline severity estimate, delay-adjusted severity estimate. delay-adjusted severity estimates can calculated using either estimate_static() estimate_time_varying() functions. See vignettes estimating static measure disease severity estimating time-varying measure disease severity, respectively, details functions.","code":""},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_ascertainment.html","id":"preparing-the-raw-data","dir":"Articles","previous_headings":"Ascertainment for the Covid-19 pandemic in the U.K.","what":"Preparing the raw data","title":"Estimating the proportion of cases that are ascertained during an outbreak","text":"First subset data focus just first months COVID-19 outbreak U.K. period test availability changed dramatically result vaccine campaign. load data provided cfr package initially made available using covidregionaldata package (Palmer et al. 2021). filter data United Kingdom , later examples use data. subset data focus just first months outbreak United Kingdom. , plot case incidence data following command. plotting commands hidden brevity. Figure 1: Incidence cases time ongoing COVID-19 outbreak U.K. , plot death incidence data following command: Figure 2: Incidence deaths time ongoing COVID-19 outbreak U.K.","code":"# get Covid data provided with the package data(\"covid_data\")  # filter for the U.K df_covid_uk <- filter(covid_data, country == \"United Kingdom\")  # view the data format df_covid_uk #>            date        country  cases deaths #> 1    2020-01-03 United Kingdom      0      0 #> 2    2020-01-04 United Kingdom      0      0 #> 3    2020-01-05 United Kingdom      0      0 #> 4    2020-01-06 United Kingdom      0      0 #> 5    2020-01-07 United Kingdom      0      0 #> 6    2020-01-08 United Kingdom      0      0 #> 7    2020-01-09 United Kingdom      0      0 #> 8    2020-01-10 United Kingdom      0      0 #> 9    2020-01-11 United Kingdom      0      0 #> 10   2020-01-12 United Kingdom      0      0 #> 11   2020-01-13 United Kingdom      0      0 #> 12   2020-01-14 United Kingdom      0      0 #> 13   2020-01-15 United Kingdom      0      0 #> 14   2020-01-16 United Kingdom      0      0 #> 15   2020-01-17 United Kingdom      0      0 #> 16   2020-01-18 United Kingdom      0      0 #> 17   2020-01-19 United Kingdom      0      0 #> 18   2020-01-20 United Kingdom      0      0 #> 19   2020-01-21 United Kingdom      0      0 #> 20   2020-01-22 United Kingdom      0      0 #> 21   2020-01-23 United Kingdom      0      0 #> 22   2020-01-24 United Kingdom      0      0 #> 23   2020-01-25 United Kingdom      0      0 #> 24   2020-01-26 United Kingdom      0      0 #> 25   2020-01-27 United Kingdom      0      0 #> 26   2020-01-28 United Kingdom      0      0 #> 27   2020-01-29 United Kingdom      0      0 #> 28   2020-01-30 United Kingdom      0      0 #> 29   2020-01-31 United Kingdom      0      0 #> 30   2020-02-01 United Kingdom      1      1 #> 31   2020-02-02 United Kingdom      0      0 #> 32   2020-02-03 United Kingdom      0      0 #> 33   2020-02-04 United Kingdom      1      1 #> 34   2020-02-05 United Kingdom     18      0 #> 35   2020-02-06 United Kingdom      0      0 #> 36   2020-02-07 United Kingdom      1      0 #> 37   2020-02-08 United Kingdom      0      0 #> 38   2020-02-09 United Kingdom      0      0 #> 39   2020-02-10 United Kingdom      3      0 #> 40   2020-02-11 United Kingdom      1      0 #> 41   2020-02-12 United Kingdom      1      0 #> 42   2020-02-13 United Kingdom      4      0 #> 43   2020-02-14 United Kingdom      1      0 #> 44   2020-02-15 United Kingdom      1      0 #> 45   2020-02-16 United Kingdom      0      0 #> 46   2020-02-17 United Kingdom      0      0 #> 47   2020-02-18 United Kingdom      0      0 #> 48   2020-02-19 United Kingdom      1      0 #> 49   2020-02-20 United Kingdom      0      0 #> 50   2020-02-21 United Kingdom      0      0 #> 51   2020-02-22 United Kingdom      0      0 #> 52   2020-02-23 United Kingdom      2      0 #> 53   2020-02-24 United Kingdom      0      1 #> 54   2020-02-25 United Kingdom      6      0 #> 55   2020-02-26 United Kingdom      2      0 #> 56   2020-02-27 United Kingdom      3      0 #> 57   2020-02-28 United Kingdom      2      0 #> 58   2020-02-29 United Kingdom      8      0 #> 59   2020-03-01 United Kingdom     12      0 #> 60   2020-03-02 United Kingdom      4      0 #> 61   2020-03-03 United Kingdom     20      0 #> 62   2020-03-04 United Kingdom     41      1 #> 63   2020-03-05 United Kingdom     58      0 #> 64   2020-03-06 United Kingdom     56      1 #> 65   2020-03-07 United Kingdom     49      2 #> 66   2020-03-08 United Kingdom     83      2 #> 67   2020-03-09 United Kingdom     68      0 #> 68   2020-03-10 United Kingdom     55      2 #> 69   2020-03-11 United Kingdom    148      5 #> 70   2020-03-12 United Kingdom    265      3 #> 71   2020-03-13 United Kingdom    403      7 #> 72   2020-03-14 United Kingdom    484     13 #> 73   2020-03-15 United Kingdom    478     16 #> 74   2020-03-16 United Kingdom    352     21 #> 75   2020-03-17 United Kingdom    441     30 #> 76   2020-03-18 United Kingdom    602     50 #> 77   2020-03-19 United Kingdom    783     58 #> 78   2020-03-20 United Kingdom    984     73 #> 79   2020-03-21 United Kingdom   1040     79 #> 80   2020-03-22 United Kingdom   1253    118 #> 81   2020-03-23 United Kingdom   1183    143 #> 82   2020-03-24 United Kingdom   1361    183 #> 83   2020-03-25 United Kingdom   2289    206 #> 84   2020-03-26 United Kingdom   2353    263 #> 85   2020-03-27 United Kingdom   2666    337 #> 86   2020-03-28 United Kingdom   3039    410 #> 87   2020-03-29 United Kingdom   3155    463 #> 88   2020-03-30 United Kingdom   2774    516 #> 89   2020-03-31 United Kingdom   2818    585 #> 90   2020-04-01 United Kingdom   4195    710 #> 91   2020-04-02 United Kingdom   4463    827 #> 92   2020-04-03 United Kingdom   4891    922 #> 93   2020-04-04 United Kingdom   4824   1006 #> 94   2020-04-05 United Kingdom   4853   1056 #> 95   2020-04-06 United Kingdom   3976   1146 #> 96   2020-04-07 United Kingdom   3556   1219 #> 97   2020-04-08 United Kingdom   5273   1168 #> 98   2020-04-09 United Kingdom   5477   1292 #> 99   2020-04-10 United Kingdom   5146   1459 #> 100  2020-04-11 United Kingdom   4875   1371 #> 101  2020-04-12 United Kingdom   4327   1319 #> 102  2020-04-13 United Kingdom   3585   1362 #> 103  2020-04-14 United Kingdom   3507   1376 #> 104  2020-04-15 United Kingdom   4203   1230 #> 105  2020-04-16 United Kingdom   4335   1252 #> 106  2020-04-17 United Kingdom   5070   1275 #> 107  2020-04-18 United Kingdom   5292   1320 #> 108  2020-04-19 United Kingdom   4977   1267 #> 109  2020-04-20 United Kingdom   4744   1188 #> 110  2020-04-21 United Kingdom   3881   1122 #> 111  2020-04-22 United Kingdom   4441   1159 #> 112  2020-04-23 United Kingdom   4796   1082 #> 113  2020-04-24 United Kingdom   5517   1101 #> 114  2020-04-25 United Kingdom   5166   1037 #> 115  2020-04-26 United Kingdom   4961   1004 #> 116  2020-04-27 United Kingdom   3757    918 #> 117  2020-04-28 United Kingdom   3476    894 #> 118  2020-04-29 United Kingdom   4739    866 #> 119  2020-04-30 United Kingdom   4719    800 #> 120  2020-05-01 United Kingdom   5433    817 #> 121  2020-05-02 United Kingdom   4961    780 #> 122  2020-05-03 United Kingdom   4766    785 #> 123  2020-05-04 United Kingdom   3258    705 #> 124  2020-05-05 United Kingdom   3002    661 #> 125  2020-05-06 United Kingdom   3398    676 #> 126  2020-05-07 United Kingdom   3686    642 #> 127  2020-05-08 United Kingdom   3832    627 #> 128  2020-05-09 United Kingdom   3787    629 #> 129  2020-05-10 United Kingdom   3064    568 #> 130  2020-05-11 United Kingdom   2170    539 #> 131  2020-05-12 United Kingdom   2337    493 #> 132  2020-05-13 United Kingdom   3612    427 #> 133  2020-05-14 United Kingdom   3410    441 #> 134  2020-05-15 United Kingdom   3330    454 #> 135  2020-05-16 United Kingdom   2630    465 #> 136  2020-05-17 United Kingdom   2530    421 #> 137  2020-05-18 United Kingdom   2082    419 #> 138  2020-05-19 United Kingdom   1837    377 #> 139  2020-05-20 United Kingdom   2581    407 #> 140  2020-05-21 United Kingdom   3063    371 #> 141  2020-05-22 United Kingdom   2719    353 #> 142  2020-05-23 United Kingdom   2567    342 #> 143  2020-05-24 United Kingdom   2057    300 #> 144  2020-05-25 United Kingdom   1532    284 #> 145  2020-05-26 United Kingdom   1373    281 #> 146  2020-05-27 United Kingdom   1625    279 #> 147  2020-05-28 United Kingdom   2070    299 #> 148  2020-05-29 United Kingdom   1825    281 #> 149  2020-05-30 United Kingdom   1757    288 #> 150  2020-05-31 United Kingdom   1531    254 #> 151  2020-06-01 United Kingdom   1132    219 #> 152  2020-06-02 United Kingdom   1080    195 #> 153  2020-06-03 United Kingdom   1439    199 #> 154  2020-06-04 United Kingdom   1492    233 #> 155  2020-06-05 United Kingdom   1369    203 #> 156  2020-06-06 United Kingdom   1249    183 #> 157  2020-06-07 United Kingdom   1123    184 #> 158  2020-06-08 United Kingdom    804    151 #> 159  2020-06-09 United Kingdom    722    163 #> 160  2020-06-10 United Kingdom   1099    161 #> 161  2020-06-11 United Kingdom   1165    137 #> 162  2020-06-12 United Kingdom   1196    166 #> 163  2020-06-13 United Kingdom   1013    121 #> 164  2020-06-14 United Kingdom   1053    135 #> 165  2020-06-15 United Kingdom    886    101 #> 166  2020-06-16 United Kingdom    826    136 #> 167  2020-06-17 United Kingdom   1045    107 #> 168  2020-06-18 United Kingdom   1103    120 #> 169  2020-06-19 United Kingdom   1017    105 #> 170  2020-06-20 United Kingdom   1022     89 #> 171  2020-06-21 United Kingdom    993     88 #> 172  2020-06-22 United Kingdom    683     87 #> 173  2020-06-23 United Kingdom    636     80 #> 174  2020-06-24 United Kingdom    899     83 #> 175  2020-06-25 United Kingdom    883     97 #> 176  2020-06-26 United Kingdom    777    101 #> 177  2020-06-27 United Kingdom    726    108 #> 178  2020-06-28 United Kingdom    666     79 #> 179  2020-06-29 United Kingdom    653     73 #> 180  2020-06-30 United Kingdom    449     70 #> 181  2020-07-01 United Kingdom    724     69 #> 182  2020-07-02 United Kingdom    623     81 #> 183  2020-07-03 United Kingdom    652     54 #> 184  2020-07-04 United Kingdom    606     61 #> 185  2020-07-05 United Kingdom    568     48 #> 186  2020-07-06 United Kingdom    399     52 #> 187  2020-07-07 United Kingdom    558     52 #> 188  2020-07-08 United Kingdom    714     54 #> 189  2020-07-09 United Kingdom    609     43 #> 190  2020-07-10 United Kingdom    713     47 #> 191  2020-07-11 United Kingdom    722     61 #> 192  2020-07-12 United Kingdom    568     44 #> 193  2020-07-13 United Kingdom    458     38 #> 194  2020-07-14 United Kingdom    366     32 #> 195  2020-07-15 United Kingdom    740     45 #> 196  2020-07-16 United Kingdom    705     42 #> 197  2020-07-17 United Kingdom    777     41 #> 198  2020-07-18 United Kingdom    712     21 #> 199  2020-07-19 United Kingdom    582     34 #> 200  2020-07-20 United Kingdom    505     31 #> 201  2020-07-21 United Kingdom    448     24 #> 202  2020-07-22 United Kingdom    830     31 #> 203  2020-07-23 United Kingdom    788     31 #> 204  2020-07-24 United Kingdom    816     34 #> 205  2020-07-25 United Kingdom    808     36 #> 206  2020-07-26 United Kingdom    774     19 #> 207  2020-07-27 United Kingdom    530     23 #> 208  2020-07-28 United Kingdom    563     32 #> 209  2020-07-29 United Kingdom    869     18 #> 210  2020-07-30 United Kingdom    856     26 #> 211  2020-07-31 United Kingdom   1062     28 #> 212  2020-08-01 United Kingdom    946     17 #> 213  2020-08-02 United Kingdom    698     31 #> 214  2020-08-03 United Kingdom    559     20 #> 215  2020-08-04 United Kingdom    564     17 #> 216  2020-08-05 United Kingdom   1060     23 #> 217  2020-08-06 United Kingdom   1066     27 #> 218  2020-08-07 United Kingdom   1091     13 #> 219  2020-08-08 United Kingdom   1105     21 #> 220  2020-08-09 United Kingdom    973     24 #> 221  2020-08-10 United Kingdom    710     22 #> 222  2020-08-11 United Kingdom    627     19 #> 223  2020-08-12 United Kingdom   1499     25 #> 224  2020-08-13 United Kingdom   1378     20 #> 225  2020-08-14 United Kingdom   1242     24 #> 226  2020-08-15 United Kingdom   1156     23 #> 227  2020-08-16 United Kingdom   1185     18 #> 228  2020-08-17 United Kingdom    714     23 #> 229  2020-08-18 United Kingdom    602     15 #> 230  2020-08-19 United Kingdom   1298     21 #> 231  2020-08-20 United Kingdom   1116     15 #> 232  2020-08-21 United Kingdom   1282     13 #> 233  2020-08-22 United Kingdom   1498     16 #> 234  2020-08-23 United Kingdom   1218     10 #> 235  2020-08-24 United Kingdom    842     12 #> 236  2020-08-25 United Kingdom    831     17 #> 237  2020-08-26 United Kingdom   1300      9 #> 238  2020-08-27 United Kingdom   1270     22 #> 239  2020-08-28 United Kingdom   1388     16 #> 240  2020-08-29 United Kingdom   1591     12 #> 241  2020-08-30 United Kingdom   1632     12 #> 242  2020-08-31 United Kingdom   1230      8 #> 243  2020-09-01 United Kingdom   1171     11 #> 244  2020-09-02 United Kingdom   1513     18 #> 245  2020-09-03 United Kingdom   2288     11 #> 246  2020-09-04 United Kingdom   3077     15 #> 247  2020-09-05 United Kingdom   3152      9 #> 248  2020-09-06 United Kingdom   3092     15 #> 249  2020-09-07 United Kingdom   2551     14 #> 250  2020-09-08 United Kingdom   2465     13 #> 251  2020-09-09 United Kingdom   3931     24 #> 252  2020-09-10 United Kingdom   3370     16 #> 253  2020-09-11 United Kingdom   3365     14 #> 254  2020-09-12 United Kingdom   3628     16 #> 255  2020-09-13 United Kingdom   3324     19 #> 256  2020-09-14 United Kingdom   2670     23 #> 257  2020-09-15 United Kingdom   2154     20 #> 258  2020-09-16 United Kingdom   3428     21 #> 259  2020-09-17 United Kingdom   3551     26 #> 260  2020-09-18 United Kingdom   4399     31 #> 261  2020-09-19 United Kingdom   4675     38 #> 262  2020-09-20 United Kingdom   4973     30 #> 263  2020-09-21 United Kingdom   4889     25 #> 264  2020-09-22 United Kingdom   5340     40 #> 265  2020-09-23 United Kingdom   5627     30 #> 266  2020-09-24 United Kingdom   6441     39 #> 267  2020-09-25 United Kingdom   7096     58 #> 268  2020-09-26 United Kingdom   7682     34 #> 269  2020-09-27 United Kingdom   7318     40 #> 270  2020-09-28 United Kingdom   6810     47 #> 271  2020-09-29 United Kingdom   7023     56 #> 272  2020-09-30 United Kingdom   9983     55 #> 273  2020-10-01 United Kingdom  10366     48 #> 274  2020-10-02 United Kingdom  12717     61 #> 275  2020-10-03 United Kingdom  13357     71 #> 276  2020-10-04 United Kingdom  13854     74 #> 277  2020-10-05 United Kingdom  11667     70 #> 278  2020-10-06 United Kingdom  11953     63 #> 279  2020-10-07 United Kingdom  16753     68 #> 280  2020-10-08 United Kingdom  17250     84 #> 281  2020-10-09 United Kingdom  18573    110 #> 282  2020-10-10 United Kingdom  18425     97 #> 283  2020-10-11 United Kingdom  15893     96 #> 284  2020-10-12 United Kingdom  12648    107 #> 285  2020-10-13 United Kingdom  12202    128 #> 286  2020-10-14 United Kingdom  19671    120 #> 287  2020-10-15 United Kingdom  19116    119 #> 288  2020-10-16 United Kingdom  19920    122 #> 289  2020-10-17 United Kingdom  18606    152 #> 290  2020-10-18 United Kingdom  17915    162 #> 291  2020-10-19 United Kingdom  14882    186 #> 292  2020-10-20 United Kingdom  14311    167 #> 293  2020-10-21 United Kingdom  25872    193 #> 294  2020-10-22 United Kingdom  25613    210 #> 295  2020-10-23 United Kingdom  25714    232 #> 296  2020-10-24 United Kingdom  23475    242 #> 297  2020-10-25 United Kingdom  21694    225 #> 298  2020-10-26 United Kingdom  16434    219 #> 299  2020-10-27 United Kingdom  15895    255 #> 300  2020-10-28 United Kingdom  26807    282 #> 301  2020-10-29 United Kingdom  24351    285 #> 302  2020-10-30 United Kingdom  23901    281 #> 303  2020-10-31 United Kingdom  23614    320 #> 304  2020-11-01 United Kingdom  22890    352 #> 305  2020-11-02 United Kingdom  16673    340 #> 306  2020-11-03 United Kingdom  15970    359 #> 307  2020-11-04 United Kingdom  31925    338 #> 308  2020-11-05 United Kingdom  25943    377 #> 309  2020-11-06 United Kingdom  24027    340 #> 310  2020-11-07 United Kingdom  24063    387 #> 311  2020-11-08 United Kingdom  23659    417 #> 312  2020-11-09 United Kingdom  18766    417 #> 313  2020-11-10 United Kingdom  20244    432 #> 314  2020-11-11 United Kingdom  31510    491 #> 315  2020-11-12 United Kingdom  27789    410 #> 316  2020-11-13 United Kingdom  27757    409 #> 317  2020-11-14 United Kingdom  24826    430 #> 318  2020-11-15 United Kingdom  24388    450 #> 319  2020-11-16 United Kingdom  18223    459 #> 320  2020-11-17 United Kingdom  16233    456 #> 321  2020-11-18 United Kingdom  26952    431 #> 322  2020-11-19 United Kingdom  23488    466 #> 323  2020-11-20 United Kingdom  21076    514 #> 324  2020-11-21 United Kingdom  18041    485 #> 325  2020-11-22 United Kingdom  17100    485 #> 326  2020-11-23 United Kingdom  12533    498 #> 327  2020-11-24 United Kingdom  11895    512 #> 328  2020-11-25 United Kingdom  19024    507 #> 329  2020-11-26 United Kingdom  16679    496 #> 330  2020-11-27 United Kingdom  16814    499 #> 331  2020-11-28 United Kingdom  14761    461 #> 332  2020-11-29 United Kingdom  14554    459 #> 333  2020-11-30 United Kingdom  11086    484 #> 334  2020-12-01 United Kingdom  10852    501 #> 335  2020-12-02 United Kingdom  18198    465 #> 336  2020-12-03 United Kingdom  16684    422 #> 337  2020-12-04 United Kingdom  16676    414 #> 338  2020-12-05 United Kingdom  15860    503 #> 339  2020-12-06 United Kingdom  15834    498 #> 340  2020-12-07 United Kingdom  12893    407 #> 341  2020-12-08 United Kingdom  13731    436 #> 342  2020-12-09 United Kingdom  21584    466 #> 343  2020-12-10 United Kingdom  21065    472 #> 344  2020-12-11 United Kingdom  21909    448 #> 345  2020-12-12 United Kingdom  22916    496 #> 346  2020-12-13 United Kingdom  24390    491 #> 347  2020-12-14 United Kingdom  19588    488 #> 348  2020-12-15 United Kingdom  22266    480 #> 349  2020-12-16 United Kingdom  35197    506 #> 350  2020-12-17 United Kingdom  34378    506 #> 351  2020-12-18 United Kingdom  35427    484 #> 352  2020-12-19 United Kingdom  34437    567 #> 353  2020-12-20 United Kingdom  36419    586 #> 354  2020-12-21 United Kingdom  25589    548 #> 355  2020-12-22 United Kingdom  33066    550 #> 356  2020-12-23 United Kingdom  48192    601 #> 357  2020-12-24 United Kingdom  46475    628 #> 358  2020-12-25 United Kingdom  42936    629 #> 359  2020-12-26 United Kingdom  32392    616 #> 360  2020-12-27 United Kingdom  14419    655 #> 361  2020-12-28 United Kingdom  41110    691 #> 362  2020-12-29 United Kingdom  48520    717 #> 363  2020-12-30 United Kingdom  46408    722 #> 364  2020-12-31 United Kingdom  83090    712 #> 365  2021-01-01 United Kingdom  72161    760 #> 366  2021-01-02 United Kingdom  53947    822 #> 367  2021-01-03 United Kingdom  32482    807 #> 368  2021-01-04 United Kingdom  61654    832 #> 369  2021-01-05 United Kingdom  56335    806 #> 370  2021-01-06 United Kingdom  77972    896 #> 371  2021-01-07 United Kingdom  66638    973 #> 372  2021-01-08 United Kingdom  58784   1013 #> 373  2021-01-09 United Kingdom  53187   1053 #> 374  2021-01-10 United Kingdom  48105   1052 #> 375  2021-01-11 United Kingdom  40035   1091 #> 376  2021-01-12 United Kingdom  37174   1172 #> 377  2021-01-13 United Kingdom  58592   1244 #> 378  2021-01-14 United Kingdom  50647   1318 #> 379  2021-01-15 United Kingdom  46509   1306 #> 380  2021-01-16 United Kingdom  43472   1341 #> 381  2021-01-17 United Kingdom  41452   1322 #> 382  2021-01-18 United Kingdom  31250   1415 #> 383  2021-01-19 United Kingdom  29592   1360 #> 384  2021-01-20 United Kingdom  45957   1398 #> 385  2021-01-21 United Kingdom  40525   1487 #> 386  2021-01-22 United Kingdom  35986   1382 #> 387  2021-01-23 United Kingdom  32502   1347 #> 388  2021-01-24 United Kingdom  30330   1334 #> 389  2021-01-25 United Kingdom  22344   1287 #> 390  2021-01-26 United Kingdom  17554   1239 #> 391  2021-01-27 United Kingdom  30737   1262 #> 392  2021-01-28 United Kingdom  27730   1172 #> 393  2021-01-29 United Kingdom  26303   1232 #> 394  2021-01-30 United Kingdom  24773   1224 #> 395  2021-01-31 United Kingdom  22434   1156 #> 396  2021-02-01 United Kingdom  17167   1025 #> 397  2021-02-02 United Kingdom  15783    994 #> 398  2021-02-03 United Kingdom  22972   1003 #> 399  2021-02-04 United Kingdom  20265    962 #> 400  2021-02-05 United Kingdom  19914    976 #> 401  2021-02-06 United Kingdom  18493    826 #> 402  2021-02-07 United Kingdom  16307    869 #> 403  2021-02-08 United Kingdom  12320    787 #> 404  2021-02-09 United Kingdom  11664    752 #> 405  2021-02-10 United Kingdom  16194    779 #> 406  2021-02-11 United Kingdom  14225    721 #> 407  2021-02-12 United Kingdom  13899    711 #> 408  2021-02-13 United Kingdom  13139    675 #> 409  2021-02-14 United Kingdom  12573    635 #> 410  2021-02-15 United Kingdom   9035    586 #> 411  2021-02-16 United Kingdom   8995    602 #> 412  2021-02-17 United Kingdom  14735    614 #> 413  2021-02-18 United Kingdom  12939    568 #> 414  2021-02-19 United Kingdom  11942    504 #> 415  2021-02-20 United Kingdom  11793    521 #> 416  2021-02-21 United Kingdom  10728    469 #> 417  2021-02-22 United Kingdom   8313    452 #> 418  2021-02-23 United Kingdom   8098    411 #> 419  2021-02-24 United Kingdom  11657    378 #> 420  2021-02-25 United Kingdom   9763    379 #> 421  2021-02-26 United Kingdom   8847    366 #> 422  2021-02-27 United Kingdom   8024    355 #> 423  2021-02-28 United Kingdom   6782    303 #> 424  2021-03-01 United Kingdom   4949    308 #> 425  2021-03-02 United Kingdom   4873    280 #> 426  2021-03-03 United Kingdom   7192    296 #> 427  2021-03-04 United Kingdom   6918    243 #> 428  2021-03-05 United Kingdom   6172    218 #> 429  2021-03-06 United Kingdom   5937    234 #> 430  2021-03-07 United Kingdom   5467    222 #> 431  2021-03-08 United Kingdom   4628    209 #> 432  2021-03-09 United Kingdom   4410    197 #> 433  2021-03-10 United Kingdom   6890    197 #> 434  2021-03-11 United Kingdom   6488    184 #> 435  2021-03-12 United Kingdom   6250    161 #> 436  2021-03-13 United Kingdom   5933    173 #> 437  2021-03-14 United Kingdom   5717    135 #> 438  2021-03-15 United Kingdom   4381    135 #> 439  2021-03-16 United Kingdom   4425    138 #> 440  2021-03-17 United Kingdom   6703    139 #> 441  2021-03-18 United Kingdom   5863    114 #> 442  2021-03-19 United Kingdom   5978    127 #> 443  2021-03-20 United Kingdom   5632    100 #> 444  2021-03-21 United Kingdom   5180    104 #> 445  2021-03-22 United Kingdom   4247    101 #> 446  2021-03-23 United Kingdom   5390    127 #> 447  2021-03-24 United Kingdom   6459    107 #> 448  2021-03-25 United Kingdom   5484     95 #> 449  2021-03-26 United Kingdom   6224     70 #> 450  2021-03-27 United Kingdom   5616     79 #> 451  2021-03-28 United Kingdom   4567     75 #> 452  2021-03-29 United Kingdom   3731     65 #> 453  2021-03-30 United Kingdom   5030     50 #> 454  2021-03-31 United Kingdom   4196     71 #> 455  2021-04-01 United Kingdom   3779     56 #> 456  2021-04-02 United Kingdom   3966     73 #> 457  2021-04-03 United Kingdom   3674     63 #> 458  2021-04-04 United Kingdom   2747     50 #> 459  2021-04-05 United Kingdom   2508     42 #> 460  2021-04-06 United Kingdom   2412     53 #> 461  2021-04-07 United Kingdom   2744     45 #> 462  2021-04-08 United Kingdom   3313     45 #> 463  2021-04-09 United Kingdom   3253     46 #> 464  2021-04-10 United Kingdom   3147     61 #> 465  2021-04-11 United Kingdom   2953     38 #> 466  2021-04-12 United Kingdom   2380     43 #> 467  2021-04-13 United Kingdom   2376     41 #> 468  2021-04-14 United Kingdom   2881     38 #> 469  2021-04-15 United Kingdom   2495     47 #> 470  2021-04-16 United Kingdom   2512     35 #> 471  2021-04-17 United Kingdom   2345     43 #> 472  2021-04-18 United Kingdom   2347     32 #> 473  2021-04-19 United Kingdom   1722     42 #> 474  2021-04-20 United Kingdom   2584     31 #> 475  2021-04-21 United Kingdom   2738     22 #> 476  2021-04-22 United Kingdom   2541     35 #> 477  2021-04-23 United Kingdom   2708     36 #> 478  2021-04-24 United Kingdom   2409     33 #> 479  2021-04-25 United Kingdom   2020     29 #> 480  2021-04-26 United Kingdom   1564     24 #> 481  2021-04-27 United Kingdom   2119     27 #> 482  2021-04-28 United Kingdom   2626     21 #> 483  2021-04-29 United Kingdom   2178     25 #> 484  2021-04-30 United Kingdom   2499     21 #> 485  2021-05-01 United Kingdom   2230     17 #> 486  2021-05-02 United Kingdom   1825     16 #> 487  2021-05-03 United Kingdom   1432     16 #> 488  2021-05-04 United Kingdom   1521     19 #> 489  2021-05-05 United Kingdom   2084     17 #> 490  2021-05-06 United Kingdom   2553     15 #> 491  2021-05-07 United Kingdom   2569     22 #> 492  2021-05-08 United Kingdom   2326     17 #> 493  2021-05-09 United Kingdom   1982     18 #> 494  2021-05-10 United Kingdom   1609     20 #> 495  2021-05-11 United Kingdom   2307     11 #> 496  2021-05-12 United Kingdom   2809      8 #> 497  2021-05-13 United Kingdom   2329     21 #> 498  2021-05-14 United Kingdom   2335     15 #> 499  2021-05-15 United Kingdom   2182     15 #> 500  2021-05-16 United Kingdom   1938     14 #> 501  2021-05-17 United Kingdom   1628     15 #> 502  2021-05-18 United Kingdom   1923     14 #> 503  2021-05-19 United Kingdom   2858     13 #> 504  2021-05-20 United Kingdom   2812     11 #> 505  2021-05-21 United Kingdom   2813      4 #> 506  2021-05-22 United Kingdom   2517      7 #> 507  2021-05-23 United Kingdom   2367     18 #> 508  2021-05-24 United Kingdom   2000      4 #> 509  2021-05-25 United Kingdom   2326     16 #> 510  2021-05-26 United Kingdom   3369     16 #> 511  2021-05-27 United Kingdom   3427     11 #> 512  2021-05-28 United Kingdom   3922     14 #> 513  2021-05-29 United Kingdom   3747      8 #> 514  2021-05-30 United Kingdom   3589     14 #> 515  2021-05-31 United Kingdom   3000     12 #> 516  2021-06-01 United Kingdom   3164      9 #> 517  2021-06-02 United Kingdom   3897     11 #> 518  2021-06-03 United Kingdom   5431     10 #> 519  2021-06-04 United Kingdom   6168     12 #> 520  2021-06-05 United Kingdom   6258     16 #> 521  2021-06-06 United Kingdom   5861     14 #> 522  2021-06-07 United Kingdom   4731      7 #> 523  2021-06-08 United Kingdom   5534     13 #> 524  2021-06-09 United Kingdom   7946      6 #> 525  2021-06-10 United Kingdom   7896     15 #> 526  2021-06-11 United Kingdom   8210     17 #> 527  2021-06-12 United Kingdom   8043     16 #> 528  2021-06-13 United Kingdom   7619     13 #> 529  2021-06-14 United Kingdom   6284     12 #> 530  2021-06-15 United Kingdom   7135     12 #> 531  2021-06-16 United Kingdom  10362     13 #> 532  2021-06-17 United Kingdom  10800     21 #> 533  2021-06-18 United Kingdom  11052     16 #> 534  2021-06-19 United Kingdom  11106      9 #> 535  2021-06-20 United Kingdom  10320     17 #> 536  2021-06-21 United Kingdom   8447     20 #> 537  2021-06-22 United Kingdom  10087     22 #> 538  2021-06-23 United Kingdom  16308     13 #> 539  2021-06-24 United Kingdom  17402     18 #> 540  2021-06-25 United Kingdom  18351      9 #> 541  2021-06-26 United Kingdom  18714     29 #> 542  2021-06-27 United Kingdom  18169     22 #> 543  2021-06-28 United Kingdom  16301     17 #> 544  2021-06-29 United Kingdom  18502     24 #> 545  2021-06-30 United Kingdom  28418     18 #> 546  2021-07-01 United Kingdom  28199     24 #> 547  2021-07-02 United Kingdom  28923     26 #> 548  2021-07-03 United Kingdom  28794     28 #> 549  2021-07-04 United Kingdom  26339     31 #> 550  2021-07-05 United Kingdom  24010     31 #> 551  2021-07-06 United Kingdom  25170     30 #> 552  2021-07-07 United Kingdom  34919     27 #> 553  2021-07-08 United Kingdom  36060     35 #> 554  2021-07-09 United Kingdom  38597     35 #> 555  2021-07-10 United Kingdom  34020     42 #> 556  2021-07-11 United Kingdom  32804     53 #> 557  2021-07-12 United Kingdom  28379     45 #> 558  2021-07-13 United Kingdom  30503     35 #> 559  2021-07-14 United Kingdom  44511     42 #> 560  2021-07-15 United Kingdom  47707     50 #> 561  2021-07-16 United Kingdom  54910     47 #> 562  2021-07-17 United Kingdom  62000     54 #> 563  2021-07-18 United Kingdom  55264     55 #> 564  2021-07-19 United Kingdom  38476     59 #> 565  2021-07-20 United Kingdom  36182     72 #> 566  2021-07-21 United Kingdom  47924     87 #> 567  2021-07-22 United Kingdom  39876     68 #> 568  2021-07-23 United Kingdom  35548     60 #> 569  2021-07-24 United Kingdom  31278     86 #> 570  2021-07-25 United Kingdom  27817     83 #> 571  2021-07-26 United Kingdom  22852     68 #> 572  2021-07-27 United Kingdom  22187     73 #> 573  2021-07-28 United Kingdom  29981     79 #> 574  2021-07-29 United Kingdom  29582     76 #> 575  2021-07-30 United Kingdom  30237     84 #> 576  2021-07-31 United Kingdom  28432     88 #> 577  2021-08-01 United Kingdom  24749    105 #> 578  2021-08-02 United Kingdom  20570     91 #> 579  2021-08-03 United Kingdom  20985     97 #> 580  2021-08-04 United Kingdom  29840     92 #> 581  2021-08-05 United Kingdom  30473     80 #> 582  2021-08-06 United Kingdom  32338     92 #> 583  2021-08-07 United Kingdom  31660    101 #> 584  2021-08-08 United Kingdom  28035     98 #> 585  2021-08-09 United Kingdom  22540    106 #> 586  2021-08-10 United Kingdom  22887     83 #> 587  2021-08-11 United Kingdom  32162     84 #> 588  2021-08-12 United Kingdom  31518     85 #> 589  2021-08-13 United Kingdom  33350     88 #> 590  2021-08-14 United Kingdom  31726    106 #> 591  2021-08-15 United Kingdom  28974     98 #> 592  2021-08-16 United Kingdom  25057    103 #> 593  2021-08-17 United Kingdom  25327     91 #> 594  2021-08-18 United Kingdom  36907     89 #> 595  2021-08-19 United Kingdom  37920    102 #> 596  2021-08-20 United Kingdom  38739    111 #> 597  2021-08-21 United Kingdom  36501    115 #> 598  2021-08-22 United Kingdom  32231    127 #> 599  2021-08-23 United Kingdom  28536    116 #> 600  2021-08-24 United Kingdom  28743    128 #> 601  2021-08-25 United Kingdom  39715    120 #> 602  2021-08-26 United Kingdom  37682    118 #> 603  2021-08-27 United Kingdom  38777    106 #> 604  2021-08-28 United Kingdom  37613    125 #> 605  2021-08-29 United Kingdom  33745    139 #> 606  2021-08-30 United Kingdom  27601    134 #> 607  2021-08-31 United Kingdom  26136    139 #> 608  2021-09-01 United Kingdom  34774    108 #> 609  2021-09-02 United Kingdom  45212    128 #> 610  2021-09-03 United Kingdom  43532    125 #> 611  2021-09-04 United Kingdom  42328    136 #> 612  2021-09-05 United Kingdom  38633    151 #> 613  2021-09-06 United Kingdom  31810    145 #> 614  2021-09-07 United Kingdom  31803    163 #> 615  2021-09-08 United Kingdom  44929    157 #> 616  2021-09-09 United Kingdom  38619    165 #> 617  2021-09-10 United Kingdom  35849    143 #> 618  2021-09-11 United Kingdom  33974    180 #> 619  2021-09-12 United Kingdom  29187    150 #> 620  2021-09-13 United Kingdom  23533    145 #> 621  2021-09-14 United Kingdom  24060    141 #> 622  2021-09-15 United Kingdom  34658    118 #> 623  2021-09-16 United Kingdom  31435    170 #> 624  2021-09-17 United Kingdom  30414    168 #> 625  2021-09-18 United Kingdom  29710    162 #> 626  2021-09-19 United Kingdom  29479    184 #> 627  2021-09-20 United Kingdom  26645    137 #> 628  2021-09-21 United Kingdom  31084    137 #> 629  2021-09-22 United Kingdom  40768    159 #> 630  2021-09-23 United Kingdom  38848    139 #> 631  2021-09-24 United Kingdom  36757    158 #> 632  2021-09-25 United Kingdom  35851    149 #> 633  2021-09-26 United Kingdom  32108    139 #> 634  2021-09-27 United Kingdom  28567    127 #> 635  2021-09-28 United Kingdom  32083    111 #> 636  2021-09-29 United Kingdom  41589    127 #> 637  2021-09-30 United Kingdom  36548    121 #> 638  2021-10-01 United Kingdom  34836    141 #> 639  2021-10-02 United Kingdom  32604    129 #> 640  2021-10-03 United Kingdom  29058    139 #> 641  2021-10-04 United Kingdom  26316    117 #> 642  2021-10-05 United Kingdom  32059    106 #> 643  2021-10-06 United Kingdom  43733    113 #> 644  2021-10-07 United Kingdom  39279    135 #> 645  2021-10-08 United Kingdom  39264    114 #> 646  2021-10-09 United Kingdom  38465    133 #> 647  2021-10-10 United Kingdom  35612    122 #> 648  2021-10-11 United Kingdom  32306    121 #> 649  2021-10-12 United Kingdom  36418    114 #> 650  2021-10-13 United Kingdom  50304    138 #> 651  2021-10-14 United Kingdom  48321    136 #> 652  2021-10-15 United Kingdom  47775    137 #> 653  2021-10-16 United Kingdom  46419    161 #> 654  2021-10-17 United Kingdom  43560    140 #> 655  2021-10-18 United Kingdom  37878    150 #> 656  2021-10-19 United Kingdom  43752    141 #> 657  2021-10-20 United Kingdom  57743    139 #> 658  2021-10-21 United Kingdom  52529    142 #> 659  2021-10-22 United Kingdom  51661    154 #> 660  2021-10-23 United Kingdom  45194    164 #> 661  2021-10-24 United Kingdom  40664    150 #> 662  2021-10-25 United Kingdom  35103    172 #> 663  2021-10-26 United Kingdom  35764    167 #> 664  2021-10-27 United Kingdom  47466    149 #> 665  2021-10-28 United Kingdom  42124    178 #> 666  2021-10-29 United Kingdom  43045    177 #> 667  2021-10-30 United Kingdom  41390    199 #> 668  2021-10-31 United Kingdom  40251    185 #> 669  2021-11-01 United Kingdom  33569    165 #> 670  2021-11-02 United Kingdom  34814    195 #> 671  2021-11-03 United Kingdom  45109    190 #> 672  2021-11-04 United Kingdom  38019    165 #> 673  2021-11-05 United Kingdom  35986    184 #> 674  2021-11-06 United Kingdom  33662    169 #> 675  2021-11-07 United Kingdom  30318    166 #> 676  2021-11-08 United Kingdom  27436    170 #> 677  2021-11-09 United Kingdom  30586    160 #> 678  2021-11-10 United Kingdom  44126    161 #> 679  2021-11-11 United Kingdom  42246    157 #> 680  2021-11-12 United Kingdom  42942    168 #> 681  2021-11-13 United Kingdom  40999    158 #> 682  2021-11-14 United Kingdom  37763    145 #> 683  2021-11-15 United Kingdom  32885    152 #> 684  2021-11-16 United Kingdom  35532    134 #> 685  2021-11-17 United Kingdom  50948    171 #> 686  2021-11-18 United Kingdom  46430    166 #> 687  2021-11-19 United Kingdom  45895    127 #> 688  2021-11-20 United Kingdom  44062    131 #> 689  2021-11-21 United Kingdom  39606    142 #> 690  2021-11-22 United Kingdom  35335    143 #> 691  2021-11-23 United Kingdom  37250    121 #> 692  2021-11-24 United Kingdom  50733    131 #> 693  2021-11-25 United Kingdom  48197    149 #> 694  2021-11-26 United Kingdom  46772    123 #> 695  2021-11-27 United Kingdom  43425    141 #> 696  2021-11-28 United Kingdom  39330    132 #> 697  2021-11-29 United Kingdom  33303    124 #> 698  2021-11-30 United Kingdom  39706    143 #> 699  2021-12-01 United Kingdom  56289    144 #> 700  2021-12-02 United Kingdom  55695    122 #> 701  2021-12-03 United Kingdom  54820    138 #> 702  2021-12-04 United Kingdom  50319    123 #> 703  2021-12-05 United Kingdom  45667    147 #> 704  2021-12-06 United Kingdom  38783    162 #> 705  2021-12-07 United Kingdom  41051    117 #> 706  2021-12-08 United Kingdom  59694    143 #> 707  2021-12-09 United Kingdom  56258    131 #> 708  2021-12-10 United Kingdom  58827    133 #> 709  2021-12-11 United Kingdom  56995    132 #> 710  2021-12-12 United Kingdom  52492    122 #> 711  2021-12-13 United Kingdom  48594    109 #> 712  2021-12-14 United Kingdom  53158    137 #> 713  2021-12-15 United Kingdom  87169    112 #> 714  2021-12-16 United Kingdom 102788    150 #> 715  2021-12-17 United Kingdom 112702    119 #> 716  2021-12-18 United Kingdom 106055    118 #> 717  2021-12-19 United Kingdom  95897    131 #> 718  2021-12-20 United Kingdom  88883    107 #> 719  2021-12-21 United Kingdom  89133    115 #> 720  2021-12-22 United Kingdom 133966    134 #> 721  2021-12-23 United Kingdom 150293    111 #> 722  2021-12-24 United Kingdom 161560    136 #> 723  2021-12-25 United Kingdom 160633    135 #> 724  2021-12-26 United Kingdom 137268    117 #> 725  2021-12-27 United Kingdom  70363    111 #> 726  2021-12-28 United Kingdom 116287    116 #> 727  2021-12-29 United Kingdom 195011    133 #> 728  2021-12-30 United Kingdom 212469    162 #> 729  2021-12-31 United Kingdom 272798    132 #> 730  2022-01-01 United Kingdom 236576    176 #> 731  2022-01-02 United Kingdom 188567    155 #> 732  2022-01-03 United Kingdom 118275    176 #> 733  2022-01-04 United Kingdom 181068    170 #> 734  2022-01-05 United Kingdom 229901    178 #> 735  2022-01-06 United Kingdom 275647    204 #> 736  2022-01-07 United Kingdom 222174    181 #> 737  2022-01-08 United Kingdom 172980    221 #> 738  2022-01-09 United Kingdom 120287    228 #> 739  2022-01-10 United Kingdom  93615    215 #> 740  2022-01-11 United Kingdom  95790    240 #> 741  2022-01-12 United Kingdom 132959    243 #> 742  2022-01-13 United Kingdom 115245    232 #> 743  2022-01-14 United Kingdom 103219    239 #> 744  2022-01-15 United Kingdom  96412    243 #> 745  2022-01-16 United Kingdom  86325    235 #> 746  2022-01-17 United Kingdom  77950    259 #> 747  2022-01-18 United Kingdom  98097    256 #> 748  2022-01-19 United Kingdom 131514    232 #> 749  2022-01-20 United Kingdom 118857    233 #> 750  2022-01-21 United Kingdom 111760    221 #> 751  2022-01-22 United Kingdom 100324    201 #> 752  2022-01-23 United Kingdom  91730    248 #> 753  2022-01-24 United Kingdom  81733    224 #> 754  2022-01-25 United Kingdom 102365    218 #> 755  2022-01-26 United Kingdom 127364    229 #> 756  2022-01-27 United Kingdom 113201    193 #> 757  2022-01-28 United Kingdom 108668    196 #> 758  2022-01-29 United Kingdom  96200    220 #> 759  2022-01-30 United Kingdom  84026    202 #> 760  2022-01-31 United Kingdom  73512    181 #> 761  2022-02-01 United Kingdom  87702    190 #> 762  2022-02-02 United Kingdom 105051    207 #> 763  2022-02-03 United Kingdom  93949    207 #> 764  2022-02-04 United Kingdom  88418    188 #> 765  2022-02-05 United Kingdom  76644    190 #> 766  2022-02-06 United Kingdom  63264    160 #> 767  2022-02-07 United Kingdom  52305    172 #> 768  2022-02-08 United Kingdom  60552    158 #> 769  2022-02-09 United Kingdom  76483    140 #> 770  2022-02-10 United Kingdom  69661    158 #> 771  2022-02-11 United Kingdom  64339    144 #> 772  2022-02-12 United Kingdom  52293    124 #> 773  2022-02-13 United Kingdom  44559    141 #> 774  2022-02-14 United Kingdom  37529    144 #> 775  2022-02-15 United Kingdom  41755    127 #> 776  2022-02-16 United Kingdom  54745    158 #> 777  2022-02-17 United Kingdom  52502    133 #> 778  2022-02-18 United Kingdom  51572    133 #> 779  2022-02-19 United Kingdom  44716    124 #> 780  2022-02-20 United Kingdom  33241    127 #> 781  2022-02-21 United Kingdom  34647    121 #> 782  2022-02-22 United Kingdom  37720    126 #> 783  2022-02-23 United Kingdom  45131    110 #> 784  2022-02-24 United Kingdom  39188    120 #> 785  2022-02-25 United Kingdom  36476    119 #> 786  2022-02-26 United Kingdom  30631    126 #> 787  2022-02-27 United Kingdom  27837    120 #> 788  2022-02-28 United Kingdom  25089    103 #> 789  2022-03-01 United Kingdom  31360    119 #> 790  2022-03-02 United Kingdom  44649    105 #> 791  2022-03-03 United Kingdom  44795    106 #> 792  2022-03-04 United Kingdom  46179    146 #> 793  2022-03-05 United Kingdom  43761    105 #> 794  2022-03-06 United Kingdom  41408    111 #> 795  2022-03-07 United Kingdom  38759    101 #> 796  2022-03-08 United Kingdom  49026     95 #> 797  2022-03-09 United Kingdom  68520    123 #> 798  2022-03-10 United Kingdom  70111    119 #> 799  2022-03-11 United Kingdom  73531    106 #> 800  2022-03-12 United Kingdom  70510    114 #> 801  2022-03-13 United Kingdom  67030    120 #> 802  2022-03-14 United Kingdom  62078    123 #> 803  2022-03-15 United Kingdom  75738    112 #> 804  2022-03-16 United Kingdom  99832    141 #> 805  2022-03-17 United Kingdom  93708    122 #> 806  2022-03-18 United Kingdom  91752    146 #> 807  2022-03-19 United Kingdom  82853    136 #> 808  2022-03-20 United Kingdom  75285    170 #> 809  2022-03-21 United Kingdom  67417    165 #> 810  2022-03-22 United Kingdom  81054    175 #> 811  2022-03-23 United Kingdom 109286    163 #> 812  2022-03-24 United Kingdom  99095    167 #> 813  2022-03-25 United Kingdom  94185    158 #> 814  2022-03-26 United Kingdom  82905    165 #> 815  2022-03-27 United Kingdom  72430    181 #> 816  2022-03-28 United Kingdom  61456    162 #> 817  2022-03-29 United Kingdom  68336    160 #> 818  2022-03-30 United Kingdom  92857    177 #> 819  2022-03-31 United Kingdom  80126    196 #> 820  2022-04-01 United Kingdom  73643    181 #> 821  2022-04-02 United Kingdom  54791    192 #> 822  2022-04-03 United Kingdom  47462    204 #> 823  2022-04-04 United Kingdom  37592    191 #> 824  2022-04-05 United Kingdom  42179    188 #> 825  2022-04-06 United Kingdom  53727    178 #> 826  2022-04-07 United Kingdom  49101    202 #> 827  2022-04-08 United Kingdom  44750    195 #> 828  2022-04-09 United Kingdom  38709    231 #> 829  2022-04-10 United Kingdom  32988    238 #> 830  2022-04-11 United Kingdom  27885    173 #> 831  2022-04-12 United Kingdom  30952    197 #> 832  2022-04-13 United Kingdom  37371    185 #> 833  2022-04-14 United Kingdom  33771    199 #> 834  2022-04-15 United Kingdom  31685    222 #> 835  2022-04-16 United Kingdom  26638    192 #> 836  2022-04-17 United Kingdom  21615    172 #> 837  2022-04-18 United Kingdom  19924    163 #> 838  2022-04-19 United Kingdom  20144    162 #> 839  2022-04-20 United Kingdom  25223    174 #> 840  2022-04-21 United Kingdom  25772    158 #> 841  2022-04-22 United Kingdom  21457    161 #> 842  2022-04-23 United Kingdom  18464    162 #> 843  2022-04-24 United Kingdom  15703    155 #> 844  2022-04-25 United Kingdom  13210    146 #> 845  2022-04-26 United Kingdom  14715    131 #> 846  2022-04-27 United Kingdom  17108    129 #> 847  2022-04-28 United Kingdom  14560    125 #> 848  2022-04-29 United Kingdom  13055    135 #> 849  2022-04-30 United Kingdom  11608    130 #> 850  2022-05-01 United Kingdom  10012    108 #> 851  2022-05-02 United Kingdom   8354    107 #> 852  2022-05-03 United Kingdom   9034    113 #> 853  2022-05-04 United Kingdom  11907    109 #> 854  2022-05-05 United Kingdom  13318    107 #> 855  2022-05-06 United Kingdom  11672     90 #> 856  2022-05-07 United Kingdom  10221     87 #> 857  2022-05-08 United Kingdom   8954     98 #> 858  2022-05-09 United Kingdom   7517    103 #> 859  2022-05-10 United Kingdom   9062     85 #> 860  2022-05-11 United Kingdom  10702     83 #> 861  2022-05-12 United Kingdom   9748    101 #> 862  2022-05-13 United Kingdom   8725     79 #> 863  2022-05-14 United Kingdom   7642     69 #> 864  2022-05-15 United Kingdom   6942     72 #> 865  2022-05-16 United Kingdom   6120     66 #> 866  2022-05-17 United Kingdom   7973     73 #> 867  2022-05-18 United Kingdom   9417     66 #> 868  2022-05-19 United Kingdom   8286     72 #> 869  2022-05-20 United Kingdom   7638     46 #> 870  2022-05-21 United Kingdom   6820     46 #> 871  2022-05-22 United Kingdom   5821     72 #> 872  2022-05-23 United Kingdom   5019     49 #> 873  2022-05-24 United Kingdom   5997     59 #> 874  2022-05-25 United Kingdom   7313     63 #> 875  2022-05-26 United Kingdom   6679     51 #> 876  2022-05-27 United Kingdom   6293     34 #> 877  2022-05-28 United Kingdom   5753     45 #> 878  2022-05-29 United Kingdom   5409     45 #> 879  2022-05-30 United Kingdom   4988     34 #> 880  2022-05-31 United Kingdom   5680     30 #> 881  2022-06-01 United Kingdom   7115     51 #> 882  2022-06-02 United Kingdom   7093     50 #> 883  2022-06-03 United Kingdom   7011     25 #> 884  2022-06-04 United Kingdom   6209     47 #> 885  2022-06-05 United Kingdom   6635     28 #> 886  2022-06-06 United Kingdom   7492     38 #> 887  2022-06-07 United Kingdom   9815     30 #> 888  2022-06-08 United Kingdom  11747     43 #> 889  2022-06-09 United Kingdom  11411     33 #> 890  2022-06-10 United Kingdom  11784     42 #> 891  2022-06-11 United Kingdom  11319     27 #> 892  2022-06-12 United Kingdom  10784     43 #> 893  2022-06-13 United Kingdom  10077     32 #> 894  2022-06-14 United Kingdom  12693     43 #> 895  2022-06-15 United Kingdom  15272     41 #> 896  2022-06-16 United Kingdom  15141     36 #> 897  2022-06-17 United Kingdom  14837     45 #> 898  2022-06-18 United Kingdom  14225     57 #> 899  2022-06-19 United Kingdom  13919     44 #> 900  2022-06-20 United Kingdom  13623     44 #> 901  2022-06-21 United Kingdom  16997     47 #> 902  2022-06-22 United Kingdom  19942     48 #> 903  2022-06-23 United Kingdom  20896     58 #> 904  2022-06-24 United Kingdom  20873     73 #> 905  2022-06-25 United Kingdom  19590     62 #> 906  2022-06-26 United Kingdom  18349     47 #> 907  2022-06-27 United Kingdom  16800     71 #> 908  2022-06-28 United Kingdom  20778     69 #> 909  2022-06-29 United Kingdom  25104     64 #> 910  2022-06-30 United Kingdom  25041     72 #> 911  2022-07-01 United Kingdom  24601     83 #> 912  2022-07-02 United Kingdom  24240     75 #> 913  2022-07-03 United Kingdom  23650     79 #> 914  2022-07-04 United Kingdom  21961     89 #> 915  2022-07-05 United Kingdom  27780     69 #> 916  2022-07-06 United Kingdom  33704     91 #> 917  2022-07-07 United Kingdom  31415    102 #> 918  2022-07-08 United Kingdom  29698    116 #> 919  2022-07-09 United Kingdom  26454    102 #> 920  2022-07-10 United Kingdom  24611    108 #> 921  2022-07-11 United Kingdom  21246    107 #> 922  2022-07-12 United Kingdom  25096    116 #> 923  2022-07-13 United Kingdom  29826    128 #> 924  2022-07-14 United Kingdom  26946    154 #> 925  2022-07-15 United Kingdom  23856    135 #> 926  2022-07-16 United Kingdom  21100    125 #> 927  2022-07-17 United Kingdom  18359    105 #> 928  2022-07-18 United Kingdom  15017    121 #> 929  2022-07-19 United Kingdom  17236    158 #> 930  2022-07-20 United Kingdom  18718    127 #> 931  2022-07-21 United Kingdom  16670    225 #> 932  2022-07-22 United Kingdom  16169    191 #> 933  2022-07-23 United Kingdom  14158    126 #> 934  2022-07-24 United Kingdom  12378    117 #> 935  2022-07-25 United Kingdom   9934    127 #> 936  2022-07-26 United Kingdom  11275    132 #> 937  2022-07-27 United Kingdom  13299    113 #> 938  2022-07-28 United Kingdom  11725    120 #> 939  2022-07-29 United Kingdom  10544    115 #> 940  2022-07-30 United Kingdom   9329    125 #> 941  2022-07-31 United Kingdom   8508    117 #> 942  2022-08-01 United Kingdom   7325     77 #> 943  2022-08-02 United Kingdom   8426     98 #> 944  2022-08-03 United Kingdom   9835     93 #> 945  2022-08-04 United Kingdom   9170    102 #> 946  2022-08-05 United Kingdom   8353    107 #> 947  2022-08-06 United Kingdom   7296     84 #> 948  2022-08-07 United Kingdom   6548     87 #> 949  2022-08-08 United Kingdom   5420     65 #> 950  2022-08-09 United Kingdom   6547    100 #> 951  2022-08-10 United Kingdom   8068     99 #> 952  2022-08-11 United Kingdom   7309     90 #> 953  2022-08-12 United Kingdom   6748     76 #> 954  2022-08-13 United Kingdom   6193     98 #> 955  2022-08-14 United Kingdom   5339    106 #> 956  2022-08-15 United Kingdom   4495     92 #> 957  2022-08-16 United Kingdom   5363     90 #> 958  2022-08-17 United Kingdom   6424     88 #> 959  2022-08-18 United Kingdom   5559     71 #> 960  2022-08-19 United Kingdom   5032     56 #> 961  2022-08-20 United Kingdom   4564     63 #> 962  2022-08-21 United Kingdom   4012     69 #> 963  2022-08-22 United Kingdom   3502     76 #> 964  2022-08-23 United Kingdom   4085     61 #> 965  2022-08-24 United Kingdom   5224     64 #> 966  2022-08-25 United Kingdom   4778     78 #> 967  2022-08-26 United Kingdom   4554     52 #> 968  2022-08-27 United Kingdom   3796     49 #> 969  2022-08-28 United Kingdom   3451     43 #> 970  2022-08-29 United Kingdom   3112     57 #> 971  2022-08-30 United Kingdom   3439     61 #> 972  2022-08-31 United Kingdom   4662     54 #> 973  2022-09-01 United Kingdom   5226     43 #> 974  2022-09-02 United Kingdom   4615     75 #> 975  2022-09-03 United Kingdom   4350     44 #> 976  2022-09-04 United Kingdom   3808     48 #> 977  2022-09-05 United Kingdom   3417     54 #> 978  2022-09-06 United Kingdom   4288     45 #> 979  2022-09-07 United Kingdom   5125     39 #> 980  2022-09-08 United Kingdom   4578     39 #> 981  2022-09-09 United Kingdom   4235     60 #> 982  2022-09-10 United Kingdom   3747     47 #> 983  2022-09-11 United Kingdom   3553     38 #> 984  2022-09-12 United Kingdom   3268     48 #> 985  2022-09-13 United Kingdom   4347     30 #> 986  2022-09-14 United Kingdom   5307     43 #> 987  2022-09-15 United Kingdom   5147     50 #> 988  2022-09-16 United Kingdom   4973     45 #> 989  2022-09-17 United Kingdom   4634     49 #> 990  2022-09-18 United Kingdom   4134     38 #> 991  2022-09-19 United Kingdom   3521     40 #> 992  2022-09-20 United Kingdom   4339     40 #> 993  2022-09-21 United Kingdom   6166     49 #> 994  2022-09-22 United Kingdom   7828     50 #> 995  2022-09-23 United Kingdom   7553     37 #> 996  2022-09-24 United Kingdom   6815     50 #> 997  2022-09-25 United Kingdom   6485     54 #> 998  2022-09-26 United Kingdom   5719     49 #> 999  2022-09-27 United Kingdom   7240     41 #> 1000 2022-09-28 United Kingdom   8617     62 #> 1001 2022-09-29 United Kingdom   8251     68 #> 1002 2022-09-30 United Kingdom   8414     62 #> 1003 2022-10-01 United Kingdom   7895     67 #> 1004 2022-10-02 United Kingdom   7615     64 #> 1005 2022-10-03 United Kingdom   7065     81 #> 1006 2022-10-04 United Kingdom   9204     63 #> 1007 2022-10-05 United Kingdom  11692     83 #> 1008 2022-10-06 United Kingdom  10965     90 #> 1009 2022-10-07 United Kingdom  10231     99 #> 1010 2022-10-08 United Kingdom   9389     96 #> 1011 2022-10-09 United Kingdom   8950    101 #> 1012 2022-10-10 United Kingdom   7053     91 #> 1013 2022-10-11 United Kingdom   8558    101 #> 1014 2022-10-12 United Kingdom  10497     93 #> 1015 2022-10-13 United Kingdom   9461    107 #> 1016 2022-10-14 United Kingdom   8768    127 #> 1017 2022-10-15 United Kingdom   8134    112 #> 1018 2022-10-16 United Kingdom   7970    115 #> 1019 2022-10-17 United Kingdom   6442    109 #> 1020 2022-10-18 United Kingdom   7780    107 #> 1021 2022-10-19 United Kingdom  10002    117 #> 1022 2022-10-20 United Kingdom   8233    109 #> 1023 2022-10-21 United Kingdom   7598    101 #> 1024 2022-10-22 United Kingdom   6576    122 #> 1025 2022-10-23 United Kingdom   6297    111 #> 1026 2022-10-24 United Kingdom   4968    112 #> 1027 2022-10-25 United Kingdom   5523    103 #> 1028 2022-10-26 United Kingdom   6807    106 #> 1029 2022-10-27 United Kingdom   5665    114 #> 1030 2022-10-28 United Kingdom   5449     92 #> 1031 2022-10-29 United Kingdom   4855    107 #> 1032 2022-10-30 United Kingdom   4401     88 #> 1033 2022-10-31 United Kingdom   3583     97 #> 1034 2022-11-01 United Kingdom   4271     98 #> 1035 2022-11-02 United Kingdom   5130     83 #> 1036 2022-11-03 United Kingdom   4549     85 #> 1037 2022-11-04 United Kingdom   4014     79 #> 1038 2022-11-05 United Kingdom   3678     84 #> 1039 2022-11-06 United Kingdom   3107     98 #> 1040 2022-11-07 United Kingdom   2665     79 #> 1041 2022-11-08 United Kingdom   3267     58 #> 1042 2022-11-09 United Kingdom   4321     76 #> 1043 2022-11-10 United Kingdom   3829     64 #> 1044 2022-11-11 United Kingdom   3576     64 #> 1045 2022-11-12 United Kingdom   3205     55 #> 1046 2022-11-13 United Kingdom   2893     73 #> 1047 2022-11-14 United Kingdom   2433     46 #> 1048 2022-11-15 United Kingdom   2912     56 #> 1049 2022-11-16 United Kingdom   3923     62 #> 1050 2022-11-17 United Kingdom   3534     66 #> 1051 2022-11-18 United Kingdom   3260     54 #> 1052 2022-11-19 United Kingdom   3037     54 #> 1053 2022-11-20 United Kingdom   2773     58 #> 1054 2022-11-21 United Kingdom   2430     57 #> 1055 2022-11-22 United Kingdom   2890     61 #> 1056 2022-11-23 United Kingdom   3937     53 #> 1057 2022-11-24 United Kingdom   3805     59 #> 1058 2022-11-25 United Kingdom   3616     60 #> 1059 2022-11-26 United Kingdom   3329     51 #> 1060 2022-11-27 United Kingdom   2902     42 #> 1061 2022-11-28 United Kingdom   2551     48 #> 1062 2022-11-29 United Kingdom   3448     56 #> 1063 2022-11-30 United Kingdom   4639     61 #> 1064 2022-12-01 United Kingdom   4386     54 #> 1065 2022-12-02 United Kingdom   3980     45 #> 1066 2022-12-03 United Kingdom   3505     55 #> 1067 2022-12-04 United Kingdom   3596     51 #> 1068 2022-12-05 United Kingdom   2748     57 #> 1069 2022-12-06 United Kingdom   3786     48 #> 1070 2022-12-07 United Kingdom   5325     64 #> 1071 2022-12-08 United Kingdom   5241     75 #> 1072 2022-12-09 United Kingdom   5195     64 #> 1073 2022-12-10 United Kingdom   4537     70 #> 1074 2022-12-11 United Kingdom   4216     71 #> 1075 2022-12-12 United Kingdom   3570     69 #> 1076 2022-12-13 United Kingdom   4631     71 #> 1077 2022-12-14 United Kingdom   6986     69 #> 1078 2022-12-15 United Kingdom   7111     67 #> 1079 2022-12-16 United Kingdom   6533     97 #> 1080 2022-12-17 United Kingdom   6094     59 #> 1081 2022-12-18 United Kingdom   6084     88 #> 1082 2022-12-19 United Kingdom   4743     90 #> 1083 2022-12-20 United Kingdom   5772     98 #> 1084 2022-12-21 United Kingdom   9073    114 #> 1085 2022-12-22 United Kingdom   8631    111 #> 1086 2022-12-23 United Kingdom   7802    109 #> 1087 2022-12-24 United Kingdom   6877    114 #> 1088 2022-12-25 United Kingdom   5741    118 #> 1089 2022-12-26 United Kingdom   4132    144 #> 1090 2022-12-27 United Kingdom   3694    131 #> 1091 2022-12-28 United Kingdom   4950    128 #> 1092 2022-12-29 United Kingdom   6605    142 #> 1093 2022-12-30 United Kingdom   8419    134 #> 1094 2022-12-31 United Kingdom   7718    132 # the first few months of the pandemic df_covid_uk_subset <- filter(df_covid_uk, date <= \"2020-05-31\") ggplot(df_covid_uk_subset) +   geom_step(     aes(       x = date, y = cases     ),     colour = \"steelblue\"   ) +   scale_x_date(     date_labels = \"%b-%Y\"   ) +   scale_y_continuous(     labels = comma   ) +   labs(     x = \"Date\", y = \"Cases\"   ) ggplot(df_covid_uk_subset) +   geom_step(     aes(       x = date, y = deaths     ),     colour = \"brown\"   ) +   scale_x_date(     date_labels = \"%b-%Y\"   ) +   scale_y_continuous(     labels = comma   ) +   labs(     x = \"Date\", y = \"Deaths\"   )"},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_ascertainment.html","id":"onset-to-death-distribution-for-covid-19","dir":"Articles","previous_headings":"Ascertainment for the Covid-19 pandemic in the U.K.","what":"Onset-to-death distribution for Covid-19","title":"Estimating the proportion of cases that are ascertained during an outbreak","text":"retrieve appropriate distribution reported Linton et al. (2020) using epidist_db() function epiparameter package.","code":"onset_to_death_covid <- epidist_db(   disease = \"COVID-19\",   epi_dist = \"onset_to_death\",   author = \"Linton_etal\" ) #> Warning: More than one study found. Selecting first one. Please report an issue #> with duplicated studies. #> Using Linton et al. (2020) <10.3390/jcm9020538> PMID: 32079150.  #> To retrieve the short citation use the 'get_citation' function"},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_ascertainment.html","id":"estimating-the-proportion-of-cases-that-have-been-ascertained","dir":"Articles","previous_headings":"Ascertainment for the Covid-19 pandemic in the U.K.","what":"Estimating the proportion of cases that have been ascertained","title":"Estimating the proportion of cases that are ascertained during an outbreak","text":"use estimate_ascertainment() function within cfr package calculate time-varying CFR COVID-19 epidemic U.K. function includes type argument, determines whether estimate_static() estimate_time_varying() used estimate delay-adjusted severity disease. ascertainment rate calculated disease severity calculated data, divided ‘known’ disease severity; expected known assumed best knowledge pathology disease. known disease severity passed severity_baseline argument estimate_ascertainment(), forms denominator resulting -ascertainment calculation. assume ‘true’ CFR Covid-19 0.014. arguments found estimate_time_varying(). calculated severity quantities time, visualise results.","code":"df_reporting_static <- estimate_ascertainment(   data = df_covid_uk_subset,   epidist = onset_to_death_covid,   type = \"static\",   severity_baseline = 0.014,   correct_for_delays = TRUE ) df_reporting_varying <- estimate_ascertainment(   data = df_covid_uk,   epidist = onset_to_death_covid,   type = \"varying\",   severity_baseline = 0.014,   smooth_inputs = TRUE,   burn_in_value = 7,   correct_for_delays = TRUE,   max_date = \"2020-06-30\" ) # the static reporting estimate df_reporting_static #>   ascertainment_me ascertainment_lo ascertainment_hi #> 1       0.05982906       0.05932203       0.06008584  # the time-varying reporting estimate df_reporting_varying #>   ascertainment_me ascertainment_lo ascertainment_hi #> 1           0.2346        0.1871687        0.2990665"},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_ascertainment.html","id":"ascertainment-in-countries-with-large-early-covid-19-outbreaks","dir":"Articles","previous_headings":"","what":"Ascertainment in countries with large early COVID-19 outbreaks","title":"Estimating the proportion of cases that are ascertained during an outbreak","text":"Finally, estimate ascertainment countries large early outbreaks Covid-19. illustrative purposes, define large outbreak one caused least 100,000 deaths 2020 2023, focus period start outbreak 1st June 2020. -ascertainment cases infections likely high early period pandemic, testing symptomatic cases still scale made widely available many countries. now use larger dataset covid_data made available cfr package, initially made available via covidregionaldata package (Palmer et al. 2021). adopt data science tools iteratively apply estimate_ascertainment() function across data grouped country. refer user book R Data Science better explanation code used , including packages Tidyverse. Plot ascertainment country. Figure 3: Example plot ascertainment rate country early stages Covid-19 pandemic.","code":"# nest the data df_reporting <- nest(covid_data, .by = country)  # calculate the reporting rate in each country using # map on nested dataframes df_reporting <- mutate(   df_reporting,   reporting = map(     .x = data, .f = estimate_ascertainment,     # arguments to function     epidist = onset_to_death_covid, type = \"varying\",     burn_in_value = 7, smooth_inputs = TRUE, correct_for_delays = TRUE   ) )  # unnest the data df_reporting <- unnest(df_reporting, cols = \"reporting\")  # visualise the data head(df_reporting) #> # A tibble: 6 × 5 #>   country   data     ascertainment_me ascertainment_lo ascertainment_hi #>   <chr>     <list>              <dbl>            <dbl>            <dbl> #> 1 Argentina <tibble>                1            1                    1 #> 2 Brazil    <tibble>                1            1                    1 #> 3 Colombia  <tibble>                1            1                    1 #> 4 France    <tibble>                1            1                    1 #> 5 Germany   <tibble>                1            1                    1 #> 6 India     <tibble>                1            0.536                1 df_reporting %>%   ggplot() +   geom_pointrange(     aes(       x = fct_reorder(country, ascertainment_me),       y = ascertainment_me,       ymin = ascertainment_lo,       ymax = ascertainment_hi     )   ) +   coord_flip() +   labs(x = NULL, y = \"Ascertainment Rate\") +   theme(legend.position = \"none\") +   scale_y_continuous(     labels = percent, limits = c(0, 1)   )"},{"path":[]},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_static_severity.html","id":"use-case","dir":"Articles","previous_headings":"","what":"Use case","title":"Calculating a static, delay-adjusted estimate of disease severity","text":"want static estimate severity outbreak, using method uses time series cases, infections hospitalisations (appropriate) deaths, correcting delay reporting outcomes cases.","code":""},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_static_severity.html","id":"what-we-have","dir":"Articles","previous_headings":"","what":"What we have","title":"Calculating a static, delay-adjusted estimate of disease severity","text":"time-series cases, hospitalisations proxy infections time; time-series deaths; delay distribution, describing probability individual die \\(t\\) days initially infected. first two elements expected included dataframe columns “dates”, “cases”, “deaths”; see examples. delay distribution expected specified object class <epidist> package epiparameter.","code":""},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_static_severity.html","id":"concept-correcting-for-delays-in-cfr-estimation","dir":"Articles","previous_headings":"","what":"Concept: Correcting for delays in CFR estimation","title":"Calculating a static, delay-adjusted estimate of disease severity","text":"Simply dividing number deaths number cases obtain CFR naive estimator true CFR. Consider example understand . Suppose 10 people start showing symptoms specific disease given day end day remain alive. Suppose next 5 days, numbers new cases continue rise reach 100 new cases day 5. However, suppose day 5, infected individuals remain alive. naive estimate CFR calculated end first 5 days zero, zero deaths total — point. say, outcomes cases (infections) known. Even deaths begin occur, lag ascertainment case hospitalisation outcome leads consistently biased estimate. Hence, adjusting delays using appropriate delay distribution essential accurate estimates severity.","code":""},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_static_severity.html","id":"severity-of-the-1976-ebola-outbreak","dir":"Articles","previous_headings":"","what":"Severity of the 1976 Ebola Outbreak","title":"Calculating a static, delay-adjusted estimate of disease severity","text":"use case death incidence data 1976 Ebola outbreak Democratic overall severity Ebola. though roughly half way outbreak, emulating methods presented package arguably useful.","code":""},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_static_severity.html","id":"plotting-the-raw-data","dir":"Articles","previous_headings":"Severity of the 1976 Ebola Outbreak","what":"Plotting the raw data","title":"Calculating a static, delay-adjusted estimate of disease severity","text":"First , load raw data. , plot case incidence data following command: Figure 1: Incidence cases time, taken 1976 Ebola outbreak Democratic Republic Congo. Data retrieved within cfr package. Lastly, plot death incidence data following command: Figure 2: Incidence deaths time dataset Figure 1. focus roughly first half dataset. subsetting data include days 30th September 1976, using dplyr::filter().","code":"data(\"ebola1976\") ggplot(ebola1976) +   geom_step(     aes(       x = date, y = cases     ),     colour = \"steelblue\"   ) +   scale_x_date(     date_labels = \"%d-%b-%Y\"   ) +   labs(     x = \"Date\", y = \"Cases\"   ) ggplot(ebola1976) +   geom_step(     aes(       x = date, y = deaths     ),     colour = \"brown\"   ) +   scale_x_date(     date_labels = \"%d-%b-%Y\"   ) +   labs(     x = \"Date\", y = \"Deaths\"   ) df_ebola_subset <- filter(ebola1976, date <= \"1976-09-30\")"},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_static_severity.html","id":"the-delay-distribution","dir":"Articles","previous_headings":"Severity of the 1976 Ebola Outbreak","what":"The delay distribution","title":"Calculating a static, delay-adjusted estimate of disease severity","text":"example, given using case data detection case well-approximated symptom onset, use distribution describing delay onset--death. , retrieve distribution literature (Barry et al. 2018) using epidist_db() function epiparameter package following command: visualise distribution, evaluate 0 30 days, plot results time using appropriate plot method epiparameter package. Figure 3: Example plot appropriate delay distribution 1976 Ebola dataset.** plot onset--death distribution use throughout example Ebola Virus Disease (EVD), reported .","code":"onset_to_death_ebola <- epidist_db(   disease = \"Ebola Virus Disease\",   epi_dist = \"onset_to_death\",   author = \"Barry_etal\" ) #> Using Barry et al. (2018) <10.1016/S0140-6736(18)31387-4> PMID: 30047375.  #> To retrieve the short citation use the 'get_citation' function plot(onset_to_death_ebola, day_range = seq_len(30), vb = FALSE, cex.main = 0.5)"},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_static_severity.html","id":"estimating-incidence-of-cases-or-similar-time-series-with-a-known-outcome","dir":"Articles","previous_headings":"Severity of the 1976 Ebola Outbreak","what":"Estimating incidence of cases (or similar time-series) with a known outcome","title":"Calculating a static, delay-adjusted estimate of disease severity","text":"function known_outcomes() cfr package estimates number cases known outcome time. resulting data frame contains two new columns, “known_outcomes”, number known outcomes (deaths) expected day, “u_t”, -reporting factor estimates proportion cases reported, given estimated number known outcomes. Figure 4: case death time series 1976 Ebola outbreak D.R.C., estimated known outcomes included.","code":"# calculate known outcomes df_known_outcomes_ebola <- known_outcomes(   data = df_ebola_subset,   epidist = onset_to_death_ebola )  # visualise head of data frame head(df_known_outcomes_ebola) #>         date cases deaths known_outcomes        u_t #> 1 1976-08-25     1      0     0.00000000 0.00000000 #> 2 1976-08-26     0      0     0.03316057 0.03316057 #> 3 1976-08-27     0      0     0.06482994 0.09799050 #> 4 1976-08-28     0      0     0.08472567 0.18271617 #> 5 1976-08-29     0      0     0.09389465 0.27661082 #> 6 1976-08-30     0      0     0.09506629 0.37167711 # plot cases and known outcomes as separate layers ggplot(df_known_outcomes_ebola) +   geom_step(     aes(       x = date, y = cases,       colour = \"Cases\"     )   ) +   geom_step(     aes(       x = date, y = known_outcomes,       colour = \"Known outcomes\"     )   ) +   scale_colour_manual(     values = c(       \"Cases\" = \"steelblue\",       \"Known outcomes\" = \"darkgreen\"     ),     name = NULL   ) +   scale_x_date(     date_labels = \"%d-%b-%Y\"   ) +   theme(     legend.position = \"top\"   ) +   labs(     x = \"Date\", y = \"No. of individuals\"   )"},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_static_severity.html","id":"estimating-the-naive-and-corrected-cfr","dir":"Articles","previous_headings":"Severity of the 1976 Ebola Outbreak","what":"Estimating the naive and corrected CFR","title":"Calculating a static, delay-adjusted estimate of disease severity","text":"calculate proportion cases known outcomes, apply proportion number cases correct delay onset--death. using function estimate_static() cfr package. function estimates proportion known outcomes time, uses estimate correct naive severity estimate. controlled using correct_for_delays boolean flag argument estimate_static() function. Otherwise, calculates naive severity estimate, adjust delays simply total number deaths dataset divided total number cases.","code":"# calculating the naive CFR estimate_static(   data = df_ebola_subset,   correct_for_delays = FALSE ) #>   severity_me severity_lo severity_hi #> 1   0.7197802   0.6485503   0.7836984  # calculating the corrected CFR estimate_static(   df_ebola_subset,   correct_for_delays = TRUE,   epidist = onset_to_death_ebola ) #>   severity_me severity_lo severity_hi #> 1           1        0.87           1"},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_static_severity.html","id":"severity-of-the-covid-19-pandemic-in-the-u-k-","dir":"Articles","previous_headings":"","what":"Severity of the COVID-19 pandemic in the U.K.","title":"Calculating a static, delay-adjusted estimate of disease severity","text":"now perform similar analysis steps, data taken ongoing COVID-19 epidemic U.K. brevity, describe steps without methodological explanations throughout example. get data incidence2 package (note originally made available covidregionaldata package longer available CRAN).","code":""},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_static_severity.html","id":"plotting-the-raw-data-1","dir":"Articles","previous_headings":"Severity of the COVID-19 pandemic in the U.K.","what":"Plotting the raw data","title":"Calculating a static, delay-adjusted estimate of disease severity","text":"subset data focus just first year COVID-19 outbreak U.K. , CFR changed dramatically result vaccination campaign. static severity calculations performing vignette able deal changes severity time. change default column names match required cfr subset data.frame focus first year pandemic U.K. , plot subsetted case data. Figure 5: Incidence cases time ongoing COVID-19 outbreak U.K. , plot subsetted death data. Figure 6: Incidence deaths time ongoing COVID-19 outbreak U.K.","code":"df_covid_uk <- covidregionaldataUK  df_covid_uk <- aggregate(   data = df_covid_uk,   x = cbind(cases_new, deaths_new) ~ date,   FUN = function(x) sum(x, na.rm = TRUE) )  df_covid_uk <- rename(   df_covid_uk,   cases = cases_new, deaths = deaths_new )  df_covid_uk_subset <- filter(df_covid_uk, date <= \"2020-12-31\") ggplot(df_covid_uk_subset) +   geom_step(     aes(       x = date, y = cases     ),     colour = \"steelblue\"   ) +   scale_x_date(     date_labels = \"%d-%b-%Y\"   ) +   scale_y_continuous(     labels = comma   ) +   labs(     x = \"Date\", y = \"Cases\"   ) ggplot(df_covid_uk_subset) +   geom_step(     aes(       x = date, y = deaths     ),     colour = \"brown\"   ) +   scale_x_date(     date_labels = \"%d-%b-%Y\"   ) +   scale_y_continuous(     labels = comma   ) +   labs(     x = \"Date\", y = \"Deaths\"   )"},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_static_severity.html","id":"the-delay-distribution-1","dir":"Articles","previous_headings":"Severity of the COVID-19 pandemic in the U.K.","what":"The delay distribution","title":"Calculating a static, delay-adjusted estimate of disease severity","text":"retrieve appropriate distribution Linton et al. (2020) using epidist_db() function epiparameter package. visualise distribution, evaluate 0 30 days, plot results time. Figure 7: Example plot appropriate delay distribution COVID-19 epidemic U.K. plot onset--death distribution use throughout example COVID-19, reported .","code":"onset_to_death_covid <- epidist_db(   disease = \"COVID-19\",   epi_dist = \"onset_to_death\",   author = \"Linton_etal\" ) plot(onset_to_death_covid, day_range = seq_len(30), vb = FALSE)"},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_static_severity.html","id":"estimating-incidence-of-cases-with-a-known-outcome","dir":"Articles","previous_headings":"Severity of the COVID-19 pandemic in the U.K.","what":"Estimating incidence of cases with a known outcome","title":"Calculating a static, delay-adjusted estimate of disease severity","text":"use method implementation Ebola example calculate number known outcomes time. Figure 8: case time series ongoing COVID-19 epidemic U.K., estimated known outcomes included.","code":"df_known_outcomes_covid <- known_outcomes(   data = df_covid_uk_subset,   epidist = onset_to_death_covid ) ggplot(df_known_outcomes_covid) +   geom_step(     aes(       x = date, y = cases,       colour = \"Cases\"     )   ) +   geom_step(     aes(       x = date, y = known_outcomes,       colour = \"Known outcomes\"     )   ) +   scale_colour_manual(     values = c(       \"Cases\" = \"steelblue\",       \"Known outcomes\" = \"darkgreen\"     ),     name = NULL   ) +   scale_x_date(     date_labels = \"%d-%b-%Y\"   ) +   scale_y_continuous(     labels = comma   ) +   theme(     legend.position = \"top\"   ) +   labs(     x = \"Date\", y = \"No. of individuals\"   )"},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_static_severity.html","id":"estimating-the-naive-and-corrected-cfr-1","dir":"Articles","previous_headings":"Severity of the COVID-19 pandemic in the U.K.","what":"Estimating the naive and corrected CFR","title":"Calculating a static, delay-adjusted estimate of disease severity","text":"Finally, calculate naive corrected CFRs COVID-19 epidemic U.K.","code":"# calculating the naive CFR estimate_static(   df_covid_uk_subset,   correct_for_delays = FALSE ) #>   severity_me severity_lo severity_hi #> 1  0.02893505  0.02878716  0.02908351  # calculating the corrected CFR estimate_static(   df_covid_uk_subset,   correct_for_delays = TRUE,   epidist = onset_to_death_covid ) #>   severity_me severity_lo severity_hi #> 1       0.038       0.038       0.038"},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_static_severity.html","id":"details-adjusting-for-delays-between-two-time-series","dir":"Articles","previous_headings":"Severity of the COVID-19 pandemic in the U.K.","what":"Details: Adjusting for delays between two time series","title":"Calculating a static, delay-adjusted estimate of disease severity","text":"method used estimate_static() function follows Nishiura et al. (2009). function calculates quantity \\(u_t\\) day within input data, represents proportion cases known outcome, day \\(t\\). Following Nishiura et al., \\(u_t\\) calculated following way: \\[\\begin{equation}   u_t = \\frac{\\sum_{= 0}^t         \\sum_{j = 0}^\\infty c_i f_{j - }}{\\sum_{= 0} c_i}, \\end{equation}\\] \\(f_t\\) value probability mass function time \\(t\\) \\(c_t\\), \\(d_t\\) number new cases new deaths time \\(t\\), (respectively). use \\(u_t\\) end outbreak following likelihood function estimate severity disease question. \\[\\begin{equation}   L(\\theta | y) = \\log{\\binom{u_tC}{D}} + D \\log{\\theta} +   (u_tC - D)\\log{(1.0 - \\theta)}, \\end{equation}\\] \\(C\\) \\(D\\) cumulative number cases deaths (respectively) time \\(t\\). Lastly, \\(\\theta\\) parameter wish estimate, severity disease. estimate \\(\\theta\\) using simple maximum-likelihood methods, allowing functions within package quick easy tools use. precise severity measure — CFR, IFR, HFR, etc — represents depends upon input data given user. complete clarity, common time series users might calculate severity resulting severity estimate data. Case death incidence data, case--death delay distribution (close approximation, onset--death) — Case Fatality Risk (CFR). Infection death incidence data, exposure--death delay distribution (close approximation). Hospitalisation Fatality Risk (HFR) — Hospitalisation death incidence data, delay distribution (close approximation).","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_time_varying_severity.html","id":"use-case","dir":"Articles","previous_headings":"","what":"Use case","title":"Estimating how disease severity varies over the course of an outbreak","text":"wish estimate common severity quantities change time — case fatality risk (CFR) — using method uses time series cases, infections hospitalisations (appropriate) deaths, correcting delay reporting outcomes cases.","code":""},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_time_varying_severity.html","id":"what-we-have","dir":"Articles","previous_headings":"","what":"What we have","title":"Estimating how disease severity varies over the course of an outbreak","text":"time-series cases, hospitalisations proxy infections time; time-series deaths; delay distribution, describing probability individual die \\(t\\) days initially infected. first two elements expected included dataframe columns “dates”, “cases”, “deaths”; see examples. delay distribution expected specified object class <epidist> package epiparameter.","code":""},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_time_varying_severity.html","id":"changing-severity-of-the-covid-19-pandemic-in-the-u-k-","dir":"Articles","previous_headings":"","what":"Changing severity of the COVID-19 pandemic in the U.K.","title":"Estimating how disease severity varies over the course of an outbreak","text":"outline time-varying severity estimation works cfr using number examples. data examples ongoing COVID-19 epidemic. Firstly, analyse U.K. data, pick three countries large outbreaks analyse.","code":""},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_time_varying_severity.html","id":"preparing-the-raw-data","dir":"Articles","previous_headings":"Changing severity of the COVID-19 pandemic in the U.K.","what":"Preparing the raw data","title":"Estimating how disease severity varies over the course of an outbreak","text":"First subset data focus just first year COVID-19 outbreak U.K. period, CFR changed dramatically result number changes policy, implementation relaxation lockdown; rollout vaccine; new variants emerging, etc. load Covid-19 daily case death data 19 countries ≥ 100,000 deaths 2020 2023 — data provided cfr package covid_data, initially made available covidregionaldata package (Palmer et al. 2021). subset data focus just first months outbreak. , plot case incidence data following command. plotting commands hidden brevity. Figure 1: Incidence cases time ongoing COVID-19 outbreak U.K. also plot death incidence data time. Figure 2: Incidence deaths time ongoing COVID-19 outbreak U.K.","code":"# get Covid data loaded with the package data(\"covid_data\")  # filter for the U.K df_covid_uk <- filter(covid_data, country == \"United Kingdom\") df_covid_uk_subset <- filter(df_covid_uk, date <= \"2020-12-31\") ggplot(df_covid_uk_subset) +   geom_step(     aes(       x = date, y = cases     ),     colour = \"steelblue\"   ) +   scale_x_date(     date_labels = \"%b-%Y\"   ) +   scale_y_continuous(     labels = comma   ) +   labs(     x = \"Date\", y = \"Cases\"   ) ggplot(df_covid_uk_subset) +   geom_step(     aes(       x = date, y = deaths     ),     colour = \"brown\"   ) +   scale_x_date(     date_labels = \"%b-%Y\"   ) +   scale_y_continuous(     labels = comma   ) +   labs(     x = \"Date\", y = \"Deaths\"   )"},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_time_varying_severity.html","id":"onset-to-death-distribution-for-covid-19","dir":"Articles","previous_headings":"Changing severity of the COVID-19 pandemic in the U.K.","what":"Onset-to-death distribution for Covid-19","title":"Estimating how disease severity varies over the course of an outbreak","text":"retrieve appropriate distribution reported Linton et al. (2020) using epidist_db() function epiparameter package. visualise distribution, evaluate 0 30 days, plot results time. Figure 3: Example plot appropriate delay distribution COVID-19 epidemic U.K. plot onset--death distribution use throughout example COVID-19, reported Linton et al. (2020).","code":"onset_to_death_covid <- epidist_db(   disease = \"COVID-19\",   epi_dist = \"onset_to_death\",   author = \"Linton_etal\" ) plot(onset_to_death_covid, day_range = seq(30), cex.main = 0.5)"},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_time_varying_severity.html","id":"estimating-the-naive-and-corrected-cfr","dir":"Articles","previous_headings":"Changing severity of the COVID-19 pandemic in the U.K.","what":"Estimating the naive and corrected CFR","title":"Estimating how disease severity varies over the course of an outbreak","text":"use estimate_time_varying() function within cfr package calculate time-varying CFR COVID-19 epidemic U.K. calculated severity quantities time, plot results; first naive estimate. Figure 4: Example plot naive time-varying CFR.** calculate time-varying CFR ongoing COVID-19 epidemic U.K., uncorrected delays. Lastly, plot estimate corrected reporting delays. Figure 5: Example plot corrected time-varying CFR.** calculate time-varying CFR ongoing COVID-19 epidemic U.K., corrected delays.","code":"# calculating the naive time-varying CFR df_covid_cfr_uk_naive <- estimate_time_varying(   df_covid_uk_subset,   epidist = onset_to_death_covid,   smooth_inputs = TRUE,   burn_in = 7,   correct_for_delays = FALSE )  # calculating the corrected time-varying CFR df_covid_cfr_uk_corrected <- estimate_time_varying(   df_covid_uk_subset,   epidist = onset_to_death_covid,   smooth_inputs = TRUE,   burn_in = 7,   correct_for_delays = TRUE ) ggplot(df_covid_cfr_uk_naive) +   geom_ribbon(     aes(       x = date, ymin = severity_lo, ymax = severity_hi     ),     fill = \"grey75\"   ) +   geom_line(     aes(       x = date, y = severity_me     ),     colour = \"brown\"   ) +   scale_x_date(     date_labels = \"%b-%Y\"   ) +   scale_y_continuous(     labels = percent   ) +   labs(     x = \"Date\", y = \"CFR (%)\"   ) #> Warning: Removed 30 rows containing missing values (`geom_line()`). ggplot(df_covid_cfr_uk_corrected) +   geom_ribbon(     aes(       x = date, ymin = severity_lo, ymax = severity_hi     ),     fill = \"grey75\"   ) +   geom_line(     aes(       x = date, y = severity_me     ),     colour = \"brown\"   ) +   scale_x_date(     date_labels = \"%b-%Y\"   ) +   scale_y_continuous(     labels = percent   ) +   labs(     x = \"Date\", y = \"CFR (%)\"   ) #> Warning: Removed 47 rows containing missing values (`geom_line()`)."},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_time_varying_severity.html","id":"severity-of-covid-19-in-multiple-countries","dir":"Articles","previous_headings":"","what":"Severity of COVID-19 in multiple countries","title":"Estimating how disease severity varies over the course of an outbreak","text":"now show calculate time-varying CFR Covid-19 multiple countries large outbreaks. , adopt data science approach apply estimate_time_varying() function across data grouped country. refer user book R Data Science better explanation code used , including packages Tidyverse. use larger Covid-19 cases deaths data provided package covid_data. Next, group data country apply estimate_time_varying() function across group (country). code takes moments run. simplicity, use delay distribution onset death countries. Finally plot time-varying CFR selection three countries large outbreaks COVID-19: Brazil, India, United States. Figure 6: Example plot corrected time-varying CFR. calculate time-varying CFR ongoing COVID-19 epidemic Brazil, India, United States, corrected delays.","code":"# for each country, get the time-varying severity estimate, # correcting for delays and smoothing the case and death data  # first nest the data; nest() from {tidyr} df_covid_cfr <- nest(   covid_data,   .by = country ) # to each nested data frame, apply the function `estimate_time_varying` # overwrite the `data` column, as all data will be preserved df_covid_cfr <- mutate(   df_covid_cfr,   # using map() from {purrr}   data = map(     .x = data, .f = estimate_time_varying,     # arguments to the function     epidist = onset_to_death_covid, smooth_inputs = TRUE,     smoothing_window = 7, burn_in = 7   ) )  # unnest the cfr data; unnest() from {tidyr} df_covid_cfr <- unnest(df_covid_cfr, cols = data) filter(df_covid_cfr, country %in% c(\"Brazil\", \"India\", \"United States\")) %>%   ggplot() +   geom_ribbon(     aes(       x = date, ymin = severity_lo, ymax = severity_hi,       group = country     ),     fill = \"grey\"   ) +   geom_line(     aes(       x = date, y = severity_me, colour = country     )   ) +   scale_x_date(     date_labels = \"%b-%Y\"   ) +   scale_y_continuous(     labels = percent   ) +   scale_colour_brewer(     palette = \"Dark2\"   ) +   coord_cartesian(     ylim = c(0, 0.2),     expand = FALSE   ) +   labs(     x = \"Date\", y = \"CFR (%)\"   ) +   theme(     legend.position = \"top\"   ) #> Warning: Removed 206 rows containing missing values (`geom_line()`)."},{"path":"https://epiverse-trace.github.io/cfr/articles/estimate_time_varying_severity.html","id":"details-adjusting-for-delays-between-two-time-series","dir":"Articles","previous_headings":"","what":"Details: Adjusting for delays between two time series","title":"Estimating how disease severity varies over the course of an outbreak","text":"function estimate_time_varying() cfr package estimates number cases known outcome time, following Nishiura et al. (2009). function calculates quantity \\(k_t\\) day within input data, represents number cases known outcome, day \\(t\\). Following Nishiura et al. (2009), \\(k_t\\) calculated following way: \\[\\begin{equation}   k_t = \\sum_{j = 0}^t c_t f_{j - t}. \\end{equation}\\] assume severity measure, example CFR, interest Binomially-distributed, following way \\[\\begin{equation}   d_t \\sim \\text{Binomial}(k_t, \\theta_t). \\end{equation}\\] use maximum-likelihood techniques determine value \\(\\theta_t\\) \\(t\\), whereby \\(\\theta\\) represents severity measure interest. precise severity measure — CFR, IFR, HFR, etc — \\(\\theta\\) represents depends upon input data given user.","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/cfr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pratik Gupte. Author, maintainer, copyright holder. Adam Kucharski. Author, copyright holder. Tim Russell. Author, copyright holder. Joshua W. Lambert. Reviewer. Hugo Gruson. Reviewer. Tim Taylor. Reviewer.","code":""},{"path":"https://epiverse-trace.github.io/cfr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gupte P, Kucharski , Russell T (2023). cfr: Estimate Disease Severity -Reporting. https://github.com/epiverse-trace/cfr, https://epiverse-trace.github.io/cfr/.","code":"@Manual{,   title = {cfr: Estimate Disease Severity and Under-Reporting},   author = {Pratik Gupte and Adam Kucharski and Tim Russell},   year = {2023},   note = {https://github.com/epiverse-trace/cfr, https://epiverse-trace.github.io/cfr/}, }"},{"path":"https://epiverse-trace.github.io/cfr/index.html","id":"cfr-estimate-disease-severity-and-under-reporting-","dir":"","previous_headings":"","what":"Estimate Disease Severity and Under-Reporting","title":"Estimate Disease Severity and Under-Reporting","text":"cfr R package estimate disease severity -reporting real-time, accounting delays epidemic time-series. cfr provides simple, fast methods calculate overall static case fatality ratio (CFR) outbreak given time point, well CFR changes course outbreak. cfr can help estimate disease -reporting real-time, accounting delays reporting outcomes cases. cfr implements methods outlined Nishiura et al. (2009), CFR estimates based methods likely added. cfr uses epiparameter package delay-corrected CFR estimates, packages developed Centre Mathematical Modelling Infectious Diseases London School Hygiene Tropical Medicine part Epiverse-TRACE initiative.","code":""},{"path":"https://epiverse-trace.github.io/cfr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Estimate Disease Severity and Under-Reporting","text":"current development version cfr can installed GitHub using pak package.","code":"if(!require(\"pak\")) install.packages(\"pak\") pak::pak(\"epiverse-trace/cfr\")  # Also install R package {epiparameter} for epidemiological parameter values pak::pak(\"epiverse-trace/epiparameter\")"},{"path":[]},{"path":"https://epiverse-trace.github.io/cfr/index.html","id":"overall-severity-of-the-1976-ebola-outbreak","dir":"","previous_headings":"Quick start","what":"Overall severity of the 1976 Ebola outbreak","title":"Estimate Disease Severity and Under-Reporting","text":"example basic usage shows use cfr estimate overall case fatality ratios 1976 Ebola outbreak (Camacho et al. 2014).","code":"# Load package library(cfr)  # Load the Ebola 1976 data provided with the package data(\"ebola1976\")  # read delay distribution for ebolavirus onset to death from {epiparameter} # accesses parameters reported in https://doi.org/10.1016/S0140-6736(18)31387-4 onset_to_death_ebola <- epiparameter::epidist_db(   disease = \"Ebola Virus Disease\",   epi_dist = \"onset_to_death\",   author = \"Barry_etal\" )  # Calculate the static CFR without correcting for delays estimate_static(data = ebola1976) #>   severity_me severity_lo severity_hi #> 1    0.955102   0.9210866   0.9773771  # Calculate the static CFR while correcting for delays estimate_static(   data = ebola1976,   correct_for_delays = TRUE,   epidist = onset_to_death_ebola ) #>   severity_me severity_lo severity_hi #> 1       0.959       0.842           1"},{"path":"https://epiverse-trace.github.io/cfr/index.html","id":"change-in-real-time-estimates-of-overall-severity-during-the-1976-ebola-outbreak","dir":"","previous_headings":"Quick start","what":"Change in real-time estimates of overall severity during the 1976 Ebola outbreak","title":"Estimate Disease Severity and Under-Reporting","text":"example show estimate overall severity can change data cases deaths time becomes available, using function estimate_rolling(). delay onset--death, simple “naive” calculation just divides deaths--date cases--date underestimate severity. estimate_rolling() function uses estimate_severity() adjustment account delays, instead compares deaths--date cases--known-outcome--date. example shows adjusted estimate converges “naive” estimate outbreak declines, hence larger large proportion cases known outcomes. plot rolling CFR visualise severity changes time, using ggplot2 package. plotting code hidden . Disease severity ebola 1976 outbreak estimated day epidemic. rolling CFR value converges static value towards end outbreak. corrected uncorrected estimates shown.","code":"# Calculate the CFR without correcting for delays on each day of the outbreak rolling_cfr_naive <- estimate_rolling(   data = ebola1976, )  # add the date from the outbreak rolling_cfr_naive <- cbind(date = ebola1976[, \"date\"], rolling_cfr_naive)  # see the first few rows head(rolling_cfr_naive) #>         date severity_me severity_lo severity_hi #> 1 1976-08-25           0           0       0.975 #> 2 1976-08-26           0           0       0.975 #> 3 1976-08-27           0           0       0.975 #> 4 1976-08-28           0           0       0.975 #> 5 1976-08-29           0           0       0.975 #> 6 1976-08-30           0           0       0.975  # Calculate the rolling daily CFR while correcting for delays rolling_cfr_corrected <- estimate_rolling(   data = ebola1976, correct_for_delays = TRUE,   epidist = onset_to_death_ebola )  # add the date from the outbreak rolling_cfr_corrected <- cbind(date = ebola1976[, \"date\"], rolling_cfr_corrected)  head(rolling_cfr_corrected) #>         date severity_me severity_lo severity_hi #> 1 1976-08-25       0.001          NA          NA #> 2 1976-08-26       0.001       0.001       0.999 #> 3 1976-08-27       0.001       0.001       0.999 #> 4 1976-08-28       0.001       0.001       0.999 #> 5 1976-08-29       0.001       0.001       0.999 #> 6 1976-08-30       0.001       0.001       0.994"},{"path":"https://epiverse-trace.github.io/cfr/index.html","id":"package-vignettes","dir":"","previous_headings":"","what":"Package vignettes","title":"Estimate Disease Severity and Under-Reporting","text":"details use cfr can found online documentation package vignettes, “Articles”.","code":""},{"path":"https://epiverse-trace.github.io/cfr/index.html","id":"help","dir":"","previous_headings":"","what":"Help","title":"Estimate Disease Severity and Under-Reporting","text":"report bug please open issue.","code":""},{"path":"https://epiverse-trace.github.io/cfr/index.html","id":"contribute","dir":"","previous_headings":"","what":"Contribute","title":"Estimate Disease Severity and Under-Reporting","text":"Contributions cfr welcomed. Please follow package contributing guide.","code":""},{"path":"https://epiverse-trace.github.io/cfr/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"Estimate Disease Severity and Under-Reporting","text":"Please note cfr project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":[]},{"path":"https://epiverse-trace.github.io/cfr/reference/covid_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Daily Covid-19 case and death data for countries with ≥ 100,000 deaths — covid_data","title":"Daily Covid-19 case and death data for countries with ≥ 100,000 deaths — covid_data","text":"Data adapted covidregionaldata package daily cases deaths 19 countries 100,000 deaths period 2020-01-01 2022-12-31. See References publication links data sources made available covidregionaldata. Data provided <data.frame>.","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/covid_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Daily Covid-19 case and death data for countries with ≥ 100,000 deaths — covid_data","text":"","code":"covid_data"},{"path":[]},{"path":"https://epiverse-trace.github.io/cfr/reference/covid_data.html","id":"covid-data","dir":"Reference","previous_headings":"","what":"covid_data","title":"Daily Covid-19 case and death data for countries with ≥ 100,000 deaths — covid_data","text":"data frame 20,786 rows 4 columns: date Calendar date format %Y-%m-%d country country name simple format, e.g. \"United States\" rather \"United States America\" cases Number cases reported date deaths Number deaths reported date","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/covid_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Daily Covid-19 case and death data for countries with ≥ 100,000 deaths — covid_data","text":"doi:10.21105/joss.03290 .","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/covid_data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Daily Covid-19 case and death data for countries with ≥ 100,000 deaths — covid_data","text":"Joseph Palmer, Katharine Sherratt, Richard Martin-Nielsen, Jonnie Bevan, Hamish Gibbs, Sebastian Funk Sam Abbott (2021). covidregionaldata: Subnational data COVID-19 epidemiology, doi:10.21105/joss.03290","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/ebola1976.html","id":null,"dir":"Reference","previous_headings":"","what":"Ebola 1976 outbreak case data — ebola1976","title":"Ebola 1976 outbreak case data — ebola1976","text":"example epidemic outbreak dataset use cfr package. dataset comes first Ebola outbreak Zaire 1976 analysed Camacho et al. (2014).","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/ebola1976.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ebola 1976 outbreak case data — ebola1976","text":"","code":"ebola1976"},{"path":[]},{"path":"https://epiverse-trace.github.io/cfr/reference/ebola1976.html","id":"ebola-","dir":"Reference","previous_headings":"","what":"ebola1976","title":"Ebola 1976 outbreak case data — ebola1976","text":"data frame 73 rows 3 columns: date Calendar date cases Number cases reported deaths Number deaths reported","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/ebola1976.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Ebola 1976 outbreak case data — ebola1976","text":"doi:10.1016/j.epidem.2014.09.003","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/estimate_ascertainment.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the ascertainment rate of a disease given a baseline (assumed to be\ntrue) severity estimate — estimate_ascertainment","title":"Estimate the ascertainment rate of a disease given a baseline (assumed to be\ntrue) severity estimate — estimate_ascertainment","text":"Estimates proportion cases infections ascertained (declared official cases), given time-series cases deaths, delay distribution baseline severity estimate. resulting ascertainment estimate calculated ratio baseline severity estimate delay-adjusted severity estimate","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/estimate_ascertainment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the ascertainment rate of a disease given a baseline (assumed to be\ntrue) severity estimate — estimate_ascertainment","text":"","code":"estimate_ascertainment(   data,   epidist = NULL,   type = c(\"static\", \"varying\"),   severity_baseline = 0.014,   burn_in_value = get_default_burn_in(epidist),   smooth_inputs = FALSE,   smoothing_window = 1,   correct_for_delays = FALSE,   max_date = NULL )"},{"path":"https://epiverse-trace.github.io/cfr/reference/estimate_ascertainment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the ascertainment rate of a disease given a baseline (assumed to be\ntrue) severity estimate — estimate_ascertainment","text":"data data.frame containing outbreak data. daily time series dates absolute indicator time (e.g. epiday/epiweek) numbers new cases new deaths time point. Note required columns \"date\" (date), \"cases\" (number reported cases), \"deaths\" (number reported deaths) day outbreak. Note data.frame required unbroken sequence dates missing dates . \"date\" column must class Date (see .Date()). Note also total number cases must greater total number reported deaths. epidist delay distribution used, form epiparameter::epidist() object. used obtain probability mass function parameterised time; .e. \\(f(t)\\) gives probability case known outcomes (.e. death) time \\(t\\), parameterised disease-specific parameters supplied . typical example symptom onset death delay distribution. type string, either \"static\" \"varying\" determines whether estimate_static() estimate_time_varying() used calculate resulting ascertainment rate severity_baseline assumed true baseline severity estimate used final ratio estimate overall ascertainment rate burn_in_value number time-points (typically days) disregard start time-series, burn-period desired. default value set mean central spread <epidist> object passed function, assuming temporal resolution daily. Alternatively, sensible value might 7, disregard first week cases deaths. consider case data including start time-series, set argument 1. smooth_inputs boolean flag determining whether user wishes smooth case death time-series, using moving average procedure calculating time-varying severity. Useful noisy time-series time-series strong reporting (e.g., weekend) effects smoothing_window odd number determining smoothing window size use smoothing case death time-series, using moving average procedure calculating time-varying severity. Useful noisy time-series time-series strong reporting (e.g., weekend) effects. default value 1 smoothing. Values > 1 apply smoothing. correct_for_delays boolean flag indicating whether user wishes correct delay case detection death. FALSE corresponds naive severity calculated, TRUE corresponds user calculating corrected severity max_date string representing user supplied maximum date, time-varying severity estimate calculated. Useful case long time-series, user wishes focus specific time-period","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/estimate_ascertainment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the ascertainment rate of a disease given a baseline (assumed to be\ntrue) severity estimate — estimate_ascertainment","text":"data.frame containing MLE estimate 95% confidence interval corrected severity, named \"ascertainment_me\" (central estimate ), \"ascertainment_lo\" \"ascertainment_hi\" lower upper interval limits.","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/estimate_ascertainment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the ascertainment rate of a disease given a baseline (assumed to be\ntrue) severity estimate — estimate_ascertainment","text":"","code":"# get data pre-loaded with the package data(\"covid_data\") df_covid_uk <- covid_data[covid_data$country == \"United Kingdom\", ]  df_covid_uk_subset <- subset(df_covid_uk, date <= \"2020-05-31\")  # load epidist object from {epiparameter} onset_to_death_covid <- epiparameter::epidist_db(   disease = \"COVID-19\",   epi_dist = \"onset_to_death\",   author = \"Linton_etal\" ) #> Warning: More than one study found. Selecting first one. Please report an issue with duplicated studies. #> Using Linton et al. (2020) <10.3390/jcm9020538> PMID: 32079150.  #> To retrieve the short citation use the 'get_citation' function  estimate_ascertainment(   data = df_covid_uk,   epidist = onset_to_death_covid,   type = \"varying\",   severity_baseline = 0.014,   smooth_inputs = TRUE,   burn_in_value = 7L,   correct_for_delays = TRUE,   max_date = \"2020-06-30\" ) #>   ascertainment_me ascertainment_lo ascertainment_hi #> 1           0.2346        0.1871687        0.2990665"},{"path":"https://epiverse-trace.github.io/cfr/reference/estimate_rolling.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate static severity for an expanding time series — estimate_rolling","title":"Estimate static severity for an expanding time series — estimate_rolling","text":"Calculates CFR time point case death time series supplied, using expanding window time. static CFR calculated time point, using time series start time point, increasing number time points included one iteration.","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/estimate_rolling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate static severity for an expanding time series — estimate_rolling","text":"","code":"estimate_rolling(   data,   correct_for_delays = FALSE,   epidist = NULL,   poisson_threshold = 100 )"},{"path":"https://epiverse-trace.github.io/cfr/reference/estimate_rolling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate static severity for an expanding time series — estimate_rolling","text":"data data.frame containing outbreak data. daily time series dates absolute indicator time (e.g. epiday/epiweek) numbers new cases new deaths time point. Note required columns \"date\" (date), \"cases\" (number reported cases), \"deaths\" (number reported deaths) day outbreak. Note data.frame required unbroken sequence dates missing dates . \"date\" column must class Date (see .Date()). Note also total number cases must greater total number reported deaths. correct_for_delays boolean flag indicating whether user wishes correct delay case detection death. FALSE corresponds naive severity calculated, TRUE corresponds user calculating corrected severity epidist delay distribution used, form epiparameter::epidist() object. used obtain probability mass function parameterised time; .e. \\(f(t)\\) gives probability case known outcomes (.e. death) time \\(t\\), parameterised disease-specific parameters supplied . typical example symptom onset death delay distribution. poisson_threshold case count use Poisson approximation. Set 200 default.","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/estimate_rolling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate static severity for an expanding time series — estimate_rolling","text":"data.frame MLE 95% confidence interval daily severity estimates, named \"severity_me\", \"severity_lo\", \"severity_hi\", one row day original data.frame.","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/estimate_rolling.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate static severity for an expanding time series — estimate_rolling","text":"correct_for_delays TRUE, internal function estimate_severity() used calculate rolling severity.","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/estimate_rolling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate static severity for an expanding time series — estimate_rolling","text":"","code":"# load package data data(\"ebola1976\")  # get an onset to death distribution from the {epiparameter} package onset_to_death_ebola <- epiparameter::epidist_db(   disease = \"Ebola Virus Disease\",   epi_dist = \"onset_to_death\",   author = \"Barry_etal\" ) #> Using Barry et al. (2018) <10.1016/S0140-6736(18)31387-4> PMID: 30047375.  #> To retrieve the short citation use the 'get_citation' function  # estimate severity without correcting for delays estimate_static(   ebola1976,   correct_for_delays = FALSE ) #>   severity_me severity_lo severity_hi #> 1    0.955102   0.9210866   0.9773771  # estimate severity for each day while correcting for delays # view only the first values head(   estimate_rolling(     ebola1976,     correct_for_delays = TRUE,     epidist = onset_to_death_ebola   ) ) #>   severity_me severity_lo severity_hi #> 1       0.001          NA          NA #> 2       0.001       0.001       0.999 #> 3       0.001       0.001       0.999 #> 4       0.001       0.001       0.999 #> 5       0.001       0.001       0.999 #> 6       0.001       0.001       0.994"},{"path":"https://epiverse-trace.github.io/cfr/reference/estimate_severity.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the corrected case fatality rate — estimate_severity","title":"Estimate the corrected case fatality rate — estimate_severity","text":"Estimate maximum likelihood estimate 95% confidence interval corrected severity, using total cases total cases known outcomes, latter replaces total number deaths standard (naive) severity definition. use binomial likelihood, approximated Poisson likelihood large samples","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/estimate_severity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the corrected case fatality rate — estimate_severity","text":"","code":"estimate_severity(   total_cases,   total_deaths,   total_outcomes,   poisson_threshold = 100 )"},{"path":"https://epiverse-trace.github.io/cfr/reference/estimate_severity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the corrected case fatality rate — estimate_severity","text":"total_cases total number cases observed period outbreak interest. total number cases must greater equal total number deaths. total_deaths total number deaths observed period outbreak interest. total number deaths must less equal total number cases. total_outcomes total number outcomes estimated observed period outbreak interest. See known_outcomes(). poisson_threshold case count use Poisson approximation. Set 200 default.","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/estimate_severity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the corrected case fatality rate — estimate_severity","text":"data.frame MLE 95% confidence interval corrected severity estimates, named \"severity_me\", \"severity_low\", \"severity_high\".","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/estimate_static.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate a static (in time) severity measure — estimate_static","title":"Estimate a static (in time) severity measure — estimate_static","text":"Calculates severity disease, corrected user-specified delay. cases supplied, delay distribution representing delay case detection death, case fatality ratio time estimated","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/estimate_static.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate a static (in time) severity measure — estimate_static","text":"","code":"estimate_static(   data,   correct_for_delays = FALSE,   epidist = NULL,   poisson_threshold = 100 )"},{"path":"https://epiverse-trace.github.io/cfr/reference/estimate_static.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate a static (in time) severity measure — estimate_static","text":"data data.frame containing outbreak data. daily time series dates absolute indicator time (e.g. epiday/epiweek) numbers new cases new deaths time point. Note required columns \"date\" (date), \"cases\" (number reported cases), \"deaths\" (number reported deaths) day outbreak. Note data.frame required unbroken sequence dates missing dates . \"date\" column must class Date (see .Date()). Note also total number cases must greater total number reported deaths. correct_for_delays boolean flag indicating whether user wishes correct delay case detection death. FALSE corresponds naive severity calculated, TRUE corresponds user calculating corrected severity epidist delay distribution used, form epiparameter::epidist() object. used obtain probability mass function parameterised time; .e. \\(f(t)\\) gives probability case known outcomes (.e. death) time \\(t\\), parameterised disease-specific parameters supplied . typical example symptom onset death delay distribution. poisson_threshold case count use Poisson approximation. Set 200 default.","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/estimate_static.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate a static (in time) severity measure — estimate_static","text":"data.frame MLE 95% confidence interval severity estimates, named \"severity_me\", \"severity_lo\", \"severity_hi\".","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/estimate_static.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate a static (in time) severity measure — estimate_static","text":"","code":"# load package data data(\"ebola1976\")  # get an onset to death distribution from the {epiparameter} package onset_to_death_ebola <- epiparameter::epidist_db(   disease = \"Ebola Virus Disease\",   epi_dist = \"onset_to_death\",   author = \"Barry_etal\" ) #> Using Barry et al. (2018) <10.1016/S0140-6736(18)31387-4> PMID: 30047375.  #> To retrieve the short citation use the 'get_citation' function  # estimate severity without correcting for delays estimate_static(   ebola1976,   correct_for_delays = FALSE ) #>   severity_me severity_lo severity_hi #> 1    0.955102   0.9210866   0.9773771  # estimate severity while correcting for delays estimate_static(   ebola1976,   correct_for_delays = TRUE,   epidist = onset_to_death_ebola ) #>   severity_me severity_lo severity_hi #> 1       0.959       0.842           1"},{"path":"https://epiverse-trace.github.io/cfr/reference/estimate_time_varying.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate known outcomes from case and death time-series data — estimate_time_varying","title":"Estimate known outcomes from case and death time-series data — estimate_time_varying","text":"Calculates severity disease changes time, corrected user-specified delay. cases supplied, delay distribution representing delay case detection death, case fatality ratio time estimated","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/estimate_time_varying.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate known outcomes from case and death time-series data — estimate_time_varying","text":"","code":"estimate_time_varying(   data,   epidist = NULL,   burn_in_value = get_default_burn_in(epidist),   smooth_inputs = FALSE,   smoothing_window = 1,   correct_for_delays = FALSE )"},{"path":"https://epiverse-trace.github.io/cfr/reference/estimate_time_varying.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate known outcomes from case and death time-series data — estimate_time_varying","text":"data data.frame containing outbreak data. daily time series dates absolute indicator time (e.g. epiday/epiweek) numbers new cases new deaths time point. Note required columns \"date\" (date), \"cases\" (number reported cases), \"deaths\" (number reported deaths) day outbreak. Note data.frame required unbroken sequence dates missing dates . \"date\" column must class Date (see .Date()). Note also total number cases must greater total number reported deaths. epidist delay distribution used, form epiparameter::epidist() object. used obtain probability mass function parameterised time; .e. \\(f(t)\\) gives probability case known outcomes (.e. death) time \\(t\\), parameterised disease-specific parameters supplied . typical example symptom onset death delay distribution. burn_in_value number time-points (typically days) disregard start time-series, burn-period desired. default value set mean central spread <epidist> object passed function, assuming temporal resolution daily. Alternatively, sensible value might 7, disregard first week cases deaths. consider case data including start time-series, set argument 1. smooth_inputs boolean flag determining whether user wishes smooth case death time-series, using moving average procedure calculating time-varying severity. Useful noisy time-series time-series strong reporting (e.g., weekend) effects smoothing_window odd number determining smoothing window size use smoothing case death time-series, using moving average procedure calculating time-varying severity. Useful noisy time-series time-series strong reporting (e.g., weekend) effects. default value 1 smoothing. Values > 1 apply smoothing. correct_for_delays boolean flag indicating whether user wishes correct delay case detection death. FALSE corresponds naive severity calculated, TRUE corresponds user calculating corrected severity","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/estimate_time_varying.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate known outcomes from case and death time-series data — estimate_time_varying","text":"data.frame containing MLE estimate 95% confidence interval corrected severity","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/estimate_time_varying.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate known outcomes from case and death time-series data — estimate_time_varying","text":"","code":"# get data pre-loaded with the package data(\"covid_data\") df_covid_uk <- covid_data[covid_data$country == \"United Kingdom\", ]  df_covid_uk_subset <- subset(df_covid_uk, date <= \"2020-05-31\")  # load epidist object from {epiparameter} onset_to_death_covid <- epiparameter::epidist_db(   disease = \"COVID-19\",   epi_dist = \"onset_to_death\",   author = \"Linton_etal\" ) #> Warning: More than one study found. Selecting first one. Please report an issue with duplicated studies. #> Using Linton et al. (2020) <10.3390/jcm9020538> PMID: 32079150.  #> To retrieve the short citation use the 'get_citation' function  # estimate time varying severity without correcting for delays cfr_time_varying <- estimate_time_varying(   data = df_covid_uk_subset,   smooth_inputs = TRUE,   burn_in_value = 7L,   correct_for_delays = FALSE ) # View tail(cfr_time_varying) #>            date        country cases deaths severity_me severity_lo severity_hi #> 2754 2020-05-26 United Kingdom  1373    281   0.2046613   0.1836066   0.2269878 #> 2773 2020-05-27 United Kingdom  1625    279   0.1716923   0.1536549   0.1909240 #> 2792 2020-05-28 United Kingdom  2070    299   0.1444444   0.1295706   0.1603328 #> 2811 2020-05-29 United Kingdom  1825    281   0.1539726   0.1377060   0.1713597 #> 2830 2020-05-30 United Kingdom  1757    288   0.1639158   0.1468934   0.1820684 #> 2849 2020-05-31 United Kingdom  1531    254          NA          NA          NA  # estimate time varying severity while correcting for delays cfr_time_varying <- estimate_time_varying(   data = df_covid_uk_subset,   epidist = onset_to_death_covid,   smooth_inputs = TRUE,   burn_in_value = 7L,   correct_for_delays = TRUE ) tail(cfr_time_varying) #>            date        country cases deaths severity_me severity_lo severity_hi #> 2754 2020-05-26 United Kingdom  1373    281  0.07443709  0.06626346  0.08327659 #> 2773 2020-05-27 United Kingdom  1625    279  0.07581522  0.06746658  0.08484477 #> 2792 2020-05-28 United Kingdom  2070    299  0.08324053  0.07440936  0.09275666 #> 2811 2020-05-29 United Kingdom  1825    281  0.08019406  0.07141187  0.08968396 #> 2830 2020-05-30 United Kingdom  1757    288  0.08438324  0.07527045  0.09421520 #> 2849 2020-05-31 United Kingdom  1531    254          NA          NA          NA"},{"path":"https://epiverse-trace.github.io/cfr/reference/get_default_burn_in.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a default burn-in value from a delay distribution — get_default_burn_in","title":"Get a default burn-in value from a delay distribution — get_default_burn_in","text":"Get default burn-value delay distribution","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/get_default_burn_in.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a default burn-in value from a delay distribution — get_default_burn_in","text":"","code":"get_default_burn_in(epidist = NULL)"},{"path":"https://epiverse-trace.github.io/cfr/reference/get_default_burn_in.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a default burn-in value from a delay distribution — get_default_burn_in","text":"epidist delay distribution used, form epiparameter::epidist() object. used obtain probability mass function parameterised time; .e. \\(f(t)\\) gives probability case known outcomes (.e. death) time \\(t\\), parameterised disease-specific parameters supplied . typical example symptom onset death delay distribution.","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/get_default_burn_in.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a default burn-in value from a delay distribution — get_default_burn_in","text":"single integer, burn-value.","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/known_outcomes.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate known outcomes from case and death time-series data — known_outcomes","title":"Estimate known outcomes from case and death time-series data — known_outcomes","text":"Estimates expected number individuals known outcomes case death time series data outbreak, time point supplied. Calculates daily new number known outcomes. Uses probability mass function representing delay case detection death, typically approximated symptom onset death distribution literature disease question.","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/known_outcomes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate known outcomes from case and death time-series data — known_outcomes","text":"","code":"known_outcomes(data, epidist = NULL)"},{"path":"https://epiverse-trace.github.io/cfr/reference/known_outcomes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate known outcomes from case and death time-series data — known_outcomes","text":"data data.frame containing outbreak data. daily time series dates absolute indicator time (e.g. epiday/epiweek) numbers new cases time point. function require data daily deaths, column (others) retained present. epidist delay distribution used, form epiparameter::epidist() object. used obtain probability mass function parameterised time; .e. \\(f(t)\\) gives probability case known outcomes (.e. death) time \\(t\\), parameterised disease-specific parameters supplied . typical example symptom onset death delay distribution.","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/known_outcomes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate known outcomes from case and death time-series data — known_outcomes","text":"data.frame columns data, two additional columns, \"known_outcomes\" total number known outcomes day outbreak, \"u_t\" -reporting factor.","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/known_outcomes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate known outcomes from case and death time-series data — known_outcomes","text":"","code":"# Load Ebola 1976 outbreak data data(\"ebola1976\")  # read epidist for EVD onset to death from {epiparameter} onset_to_death_ebola <- epiparameter::epidist_db(   disease = \"Ebola Virus Disease\",   epi_dist = \"onset_to_death\",   author = \"Barry_etal\" ) #> Using Barry et al. (2018) <10.1016/S0140-6736(18)31387-4> PMID: 30047375.  #> To retrieve the short citation use the 'get_citation' function  # examine the first few rows of the output head(   known_outcomes(data = ebola1976, onset_to_death_ebola) ) #>         date cases deaths known_outcomes        u_t #> 1 1976-08-25     1      0     0.00000000 0.00000000 #> 2 1976-08-26     0      0     0.03316057 0.03316057 #> 3 1976-08-27     0      0     0.06482994 0.09799050 #> 4 1976-08-28     0      0     0.08472567 0.18271617 #> 5 1976-08-29     0      0     0.09389465 0.27661082 #> 6 1976-08-30     0      0     0.09506629 0.37167711"},{"path":"https://epiverse-trace.github.io/cfr/reference/prepare_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data for CFR estimation — prepare_data","title":"Prepare data for CFR estimation — prepare_data","text":"S3 generic default method. Rather, methods classes commonly found epidemiological data, <incidence2> {incidence2} package. See incidence2::incidence().","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/prepare_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data for CFR estimation — prepare_data","text":"","code":"prepare_data(data, ...)"},{"path":"https://epiverse-trace.github.io/cfr/reference/prepare_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data for CFR estimation — prepare_data","text":"data data.frame-like object. ... arguments passed methods.","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/prepare_data.incidence2.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data from <incidence2> objects — prepare_data.incidence2","title":"Prepare data from <incidence2> objects — prepare_data.incidence2","text":"Prepares <incidence2> objects disease severity estimates. function currently support grouped <incidence2> data.","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/prepare_data.incidence2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data from <incidence2> objects — prepare_data.incidence2","text":"","code":"# S3 method for incidence2 prepare_data(   data,   cases_variable = \"cases\",   deaths_variable = \"deaths\",   fill_NA = FALSE,   ... )"},{"path":"https://epiverse-trace.github.io/cfr/reference/prepare_data.incidence2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data from <incidence2> objects — prepare_data.incidence2","text":"data <incidence2> object. cases_variable string name cases variable \"count_variable\" column data. deaths_variable string name deaths variable \"count_variable\" column data. fill_NA logical indicating whether NAs cases deaths data replaced 0-s. default value FALSE. function error fill_NA = FALSE NAs detected case death data. ... arguments.","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/prepare_data.incidence2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data from <incidence2> objects — prepare_data.incidence2","text":"data.frame suitable disease severity estimation functions provided cfr, columns \"date\", \"cases\", \"deaths\". Note groups <incidence2> retained, cases deaths summed date. result continuous sequence dates start end date data; required data passed functions estimate_static().","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/prepare_data.incidence2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare data from <incidence2> objects — prepare_data.incidence2","text":"function can replace NAs case death data 0-s requested user using fill_NA argument, FALSE default, meaning NAs retained. issue arise dataset non-sequential dates, function fills missing dates range dates input data. downstream functions require data continuous sequence dates. Keeping NAs cause downstream issues calling functions estimate_static() data, handle NAs. Setting fill_NA = TRUE resolves issue, must conscious choice.","code":""},{"path":"https://epiverse-trace.github.io/cfr/reference/prepare_data.incidence2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare data from <incidence2> objects — prepare_data.incidence2","text":"","code":"# load Covid-19 data from incidence2 covid_uk <- incidence2::covidregionaldataUK  # convert to incidence2 object covid_uk_incidence <- incidence2::incidence(   covid_uk,   date_index = \"date\",   counts = c(\"cases_new\", \"deaths_new\"),   count_names_to = \"count_variable\" )  # View head of prepared data tail(   prepare_data(     covid_uk_incidence,     cases_variable = \"cases_new\",     deaths_variable = \"deaths_new\",     fill_NA = TRUE   ) ) #>           date cases deaths #> 485 2021-05-28  6205      6 #> 486 2021-05-29  5146      5 #> 487 2021-05-30  5395      8 #> 488 2021-05-31  6251      6 #> 489 2021-06-01  3346      4 #> 490 2021-06-02     0      0"}]
