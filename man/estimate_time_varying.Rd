% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/estimate_time_varying.R
\name{estimate_time_varying}
\alias{estimate_time_varying}
\title{Estimate a severity measure that varies over time}
\usage{
estimate_time_varying(
  data,
  epidist,
  burn_in_value = get_default_burn_in(epidist),
  smooth_inputs = FALSE,
  smoothing_window = 1,
  correct_for_delays = TRUE
)
}
\arguments{
\item{data}{A data.frame containing the outbreak data. A daily time series
with dates or some other absolute indicator of time (e.g. epiday/epiweek) and
the numbers of new cases and new deaths at each time point.
Note that the required columns are "date" (for the date), "cases" (for the
number of reported cases), and "deaths" (for the number of reported deaths)
on each day of the outbreak.
Note that the data.frame is required to have an unbroken sequence of dates
with no missing dates in between. The "date" column must be of the class
\code{Date} (see \code{\link[=as.Date]{as.Date()}}).
Note also that the total number of cases must be greater than the total
number of reported deaths.}

\item{epidist}{The delay distribution used, in the form of an
\code{\link[epiparameter:epidist]{epiparameter::epidist()}} object. This is used to obtain a probability
mass function parameterised by time; i.e. \eqn{f(t)} which gives the
probability a case has a known outcomes (i.e. death) at time \eqn{t},
parameterised with disease-specific parameters before it is supplied here.
A typical example would be a symptom onset to death delay distribution.}

\item{burn_in_value}{The number of time-points (typically days) to disregard
at the start of the time-series, if a burn-in period is desired.
The default value is set to the mean of the central spread of the \verb{<epidist>}
object passed to the function, assuming the temporal resolution is daily.
Alternatively, a sensible value might be 7, to disregard the first week of
cases and deaths.
To consider all case data including the start of the time-series, set this
argument to 1.}

\item{smooth_inputs}{A boolean flag determining whether the user wishes to
smooth the case and death time-series, using a moving average procedure
before calculating the time-varying severity. Useful for noisy time-series
or time-series with strong reporting (e.g., weekend) effects}

\item{smoothing_window}{An \emph{odd} number determining the smoothing window size
to use when smoothing the case and death time-series, using a moving average
procedure before calculating the time-varying severity.
Useful for noisy time-series or time-series with strong reporting
(e.g., weekend) effects.
The default value is 1 for \emph{no smoothing}. Values > 1 apply smoothing.}

\item{correct_for_delays}{A boolean flag indicating whether the user wishes
to correct for the delay between case detection and death. FALSE corresponds
to a naive severity being calculated, TRUE corresponds to the user
calculating a corrected severity}
}
\value{
A data.frame containing the MLE estimate and 95\% confidence interval
of the corrected severity
}
\description{
Calculates how the severity of a disease changes over time,
corrected for a user-specified delay. If cases are supplied, and the delay
distribution representing the delay between case detection and death, then
a case fatality risk over time is estimated
}
\examples{
# get data pre-loaded with the package
data("covid_data")
df_covid_uk <- covid_data[covid_data$country == "United Kingdom", ]

df_covid_uk_subset <- subset(df_covid_uk, date <= "2020-05-31")

# load epidist object from {epiparameter}
onset_to_death_covid <- epiparameter::epidist_db(
  disease = "COVID-19",
  epi_dist = "onset_to_death",
  author = "Linton_etal",
  single_epidist = TRUE
)

# estimate time varying severity without correcting for delays
cfr_time_varying <- estimate_time_varying(
  data = df_covid_uk_subset,
  smooth_inputs = TRUE,
  burn_in_value = 7L,
  correct_for_delays = FALSE
)
# View
tail(cfr_time_varying)

# estimate time varying severity while correcting for delays
cfr_time_varying <- estimate_time_varying(
  data = df_covid_uk_subset,
  epidist = onset_to_death_covid,
  smooth_inputs = TRUE,
  burn_in_value = 7L,
  correct_for_delays = TRUE
)
tail(cfr_time_varying)

}
