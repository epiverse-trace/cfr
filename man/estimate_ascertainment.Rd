% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/estimate_ascertainment.R
\name{estimate_ascertainment}
\alias{estimate_ascertainment}
\title{Estimate the ascertainment ratio of a disease}
\usage{
estimate_ascertainment(
  data,
  epidist = NULL,
  type = c("static", "varying"),
  severity_baseline,
  burn_in = get_default_burn_in(epidist),
  smoothing_window = NULL,
  max_date = NULL
)
}
\arguments{
\item{data}{A \verb{<data.frame>} containing the outbreak data. A daily time
series with dates or some other absolute indicator of time (e.g. epiday or
epiweek) and the numbers of new cases and new deaths at each time point.
Note that the required columns are "date" (for the date), "cases" (for the
number of reported cases), and "deaths" (for the number of reported deaths)
on each day of the outbreak.

Note that the \verb{<data.frame>} is required to have an unbroken sequence of
dates with no missing dates in between. The "date" column must be of class
\code{Date} (see \code{\link[=as.Date]{as.Date()}}).

Note also that the total number of cases must be greater than the total
number of reported deaths.}

\item{epidist}{An optional argument for the delay distribution used, in the
form of an \verb{<epidist>} object.
Defaults to \code{NULL}, in which case no delay correction is applied.
Passing an \verb{<epidist>} automatically applies delay correction in the
severity estimation.}

\item{type}{A string, either \code{"static"} or \code{"varying"} which determines
whether \code{\link[=cfr_static]{cfr_static()}} or \code{\link[=cfr_time_varying]{cfr_time_varying()}} is used to calculate
the resulting ascertainment ratio. Defaults to \code{"static"} if this argument is
missing.}

\item{severity_baseline}{A single number in the range 0.0 -- 1.0 for the
assumed true baseline severity estimate used to estimate the overall
ascertainment ratio. Missing by default, which causes the function to error;
must be supplied by the user.}

\item{burn_in}{A single integer value for the number of time-points
(typically days) to disregard at the start of the time-series, if a burn-in
period is desired.

When an \verb{<epidist>} is provided and delay correction is requested, the
default value is set to the mean of the \verb{<epidist>}.

Defaults to 7 if no \verb{<epidist>} is provided, or if the \verb{<epidist>} is not
parameterised. This is a sensible default value that disregards the first
week of cases and deaths, assuming daily data.

To consider all case data including the start of the time-series, set this
argument to 1.}

\item{smoothing_window}{An \emph{odd} number determining the smoothing window size
to use when smoothing the case and death time-series, using a rolling median
procedure (as the \code{k} argument to \code{\link[stats:runmed]{stats::runmed()}}) before calculating the
time-varying severity.

The default behaviour is to apply no smoothing. The minimum value of this
argument is 1.}

\item{max_date}{A \code{Date} representing a user supplied maximum date, up to
which the time-varying severity estimate will be calculated. Useful in the
case of long time-series, where the user wishes to focus on a specific
time-period. See \code{\link[=as.Date]{as.Date()}} for converting a string to a \code{Date}.}
}
\value{
A \verb{<data.frame>} containing the MLE estimate and 95\% confidence
interval of the corrected severity, named "ascertainment_mean" (for the
central estimate), and "ascertainment_low" and "ascertainment_high" for the
lower and upper interval limits.
}
\description{
Estimates the proportion of cases or infections that have been
ascertained, given a time-series of cases and deaths, a delay distribution
and a baseline severity estimate. The resulting ascertainment estimate is
calculated as the ratio of the baseline severity estimate, which is assumed
to be the 'true' disease severity, and the delay-adjusted severity estimate.
}
\examples{
# get data pre-loaded with the package
data("covid_data")
df_covid_uk <- covid_data[covid_data$country == "United Kingdom", ]

df_covid_uk_subset <- subset(df_covid_uk, date <= "2020-05-31")

# load epidist object from {epiparameter}
onset_to_death_covid <- epiparameter::epidist_db(
  disease = "COVID-19",
  epi_dist = "onset_to_death",
  author = "Linton_etal",
  single_epidist = TRUE
)

estimate_ascertainment(
  data = df_covid_uk,
  epidist = onset_to_death_covid,
  type = "varying",
  severity_baseline = 0.014,
  burn_in = 7L,
  max_date = as.Date("2020-06-30")
)

}
