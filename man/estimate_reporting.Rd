% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/estimate_reporting.R
\name{estimate_reporting}
\alias{estimate_reporting}
\title{Estimate the ascertainment rate of a disease given a baseline (assumed to be
true) severity estimate}
\usage{
estimate_reporting(
  df_in,
  epi_dist,
  type = "static",
  severity_baseline = 0.014,
  burn_in_value = get_default_burn_in(epi_dist),
  smooth_inputs = NULL,
  correct_for_delays = NULL,
  max_date = NULL,
  location = "country"
)
}
\arguments{
\item{df_in}{A data.frame containing the outbreak data. A daily time series
with dates or some other absolute indicator of time (e.g. epiday/epiweek) and
the numbers of new cases and new deaths at each time point.
Note that the required columns are "date" (for the date), "cases" (for the
number of reported cases), and "deaths" (for the number of reported deaths)
on each day of the outbreak.
Note that the data.frame is required to have an unbroken sequence of dates
with no missing dates in between.
Note also that the total number of cases must be greater than the total
number of reported deaths.}

\item{epi_dist}{The delay distribution used, in the form of an
\code{\link[epiparameter:epidist]{epiparameter::epidist()}} object. This is used to obtain a probability
mass function parameterised by time; i.e. \eqn{f(t)} which gives the
probability a case has a known outcomes (i.e. death) at time \eqn{t},
parameterised with disease-specific parameters before it is supplied here.
A typical example would be a symptom onset to death delay distribution.}

\item{type}{A string, either \code{"static"} or \code{"varying"} which determines
whether \code{\link[=estimate_static]{estimate_static()}} or \code{\link[=estimate_time_varying]{estimate_time_varying()}} is used to calculate
the resulting ascertainment rate}

\item{severity_baseline}{The assumed to be true baseline severity estimate
used in the final ratio to estimate the overall ascertainment rate}

\item{burn_in_value}{The number of time-points (typically days) to disregard
at the start of the time-series, if a burn-in period is desired.
The default value is set to the mean of the central spread of the \code{epidist}
object passed to the function, assuming the temporal resolution is daily.
Alternatively, a sensible value might be 7, to disregard the first week of
cases and deaths.
To consider all case data including the start of the time-series, set this
argument to 0.}

\item{smooth_inputs}{A boolean flag determining whether the user wishes to
smooth the case and death time-series, using a moving average procedure
before calculating the time-varying severity. Useful for noisey time-series
or time-series with strong reporting (e.g., weekend) effects}

\item{correct_for_delays}{A boolean flag indicating whether the user wishes
to correct for the delay between case detection and death. FALSE corresponds
to a naive severity being calculated, TRUE corresponds to the user
calculating a corrected severity}

\item{max_date}{A string representing a user supplied maximum date, up to
which the time-varying severity estimate will be calculated. Useful in the
case of long time-series, where the user wishes to focus on a specific
time-period}

\item{location}{Column name as a string by which to disaggregate data for
estimates. This is usually a column indicating the region or country to which
the estimate applies.}
}
\value{
A data.frame containing the MLE estimate and 95\% confidence interval
of the corrected severity
}
\description{
Estimates the proportion of cases or infections that have been
ascertained (declared as official cases), given a time-series of cases and
deaths, a delay distribution and a baseline severity estimate. The resulting
ascertainment estimate is calculated as the ratio of the baseline severity
estimate and the delay-adjusted severity estimate
}
\examples{
library(datadelay)
library(epiparameter)
library(covidregionaldata)

df_covid_uk <- get_national_data(
  countries = "united kingdom", source = "who", verbose = FALSE
)
# rename columns
colnames(df_covid_uk)[colnames(df_covid_uk) == "cases_new"] <- "cases"
colnames(df_covid_uk)[colnames(df_covid_uk) == "deaths_new"] <- "deaths"

df_covid_uk_subset <- subset(df_covid_uk, date <= "2020-05-31")

onset_to_death_covid <- epidist_db(
  disease = "COVID-19",
  epi_dist = "onset_to_death",
  author = "Linton_etal"
)

df_reporting_varying <- estimate_reporting(df_covid_uk,
  epi_dist = onset_to_death_covid,
  type = "varying",
  severity_baseline = 0.014,
  smooth_inputs = TRUE,
  burn_in_value = 7L,
  correct_for_delays = TRUE,
  max_date = "2020-06-30",
  location = "U.K."
)

format_output(
  df_reporting_varying,
  estimate_type = "reporting",
  type = "Under-reporting"
)

}
